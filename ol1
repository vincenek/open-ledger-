<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OpenLedger - Professional Accounting Software</title>
    <!-- Manifest -->
    <link rel="manifest" href="manifest.json">

    <!-- iOS Support -->
    <link rel="apple-touch-icon" href="icons/icon-192x192.png">
    <meta name="apple-mobile-web-app-status-bar" content="#2563eb">

    <!-- Theme Color -->
    <meta name="theme-color" content="#2563eb">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #6c757d;
            --success: #2ecc71;
            --danger: #e74c3c;
            --warning: #f39c12;
            --info: #1abc9c;
            --light: #f8f9fa;
            --dark: #2c3e50;
            --bg-color: #f5f7fa;
            --card-bg: #ffffff;
            --text-primary: #2c3e50;
            --text-secondary: #6c757d;
            --border-radius: 12px;
            --box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s ease;
        }

        .dark-mode {
            --bg-color: #1a2235;
            --card-bg: #243145;
            --text-primary: #e9ecef;
            --text-secondary: #a0aec0;
            --box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Inter', sans-serif;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            transition: var(--transition);
        }

        .container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
            flex: 1;
        }

        /* Header Styles */
        header {
            background: var(--card-bg);
            color: var(--text-primary);
            padding: 1rem 0;
            box-shadow: var(--box-shadow);
            position: sticky;
            top: 0;
            z-index: 100;
            transition: var(--transition);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .logo-icon {
            background: var(--primary);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .logo span {
            color: var(--primary);
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        /* Navigation Tabs */
        .nav-tabs {
            display: flex;
            background: var(--card-bg);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            overflow-x: auto;
            position: sticky;
            top: 72px;
            z-index: 99;
            transition: var(--transition);
        }

        .tab {
            padding: 1rem 1.5rem;
            cursor: pointer;
            font-weight: 500;
            border-bottom: 3px solid transparent;
            transition: var(--transition);
            white-space: nowrap;
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--text-secondary);
        }

        .tab:hover {
            color: var(--primary);
        }

        .tab.active {
            border-bottom: 3px solid var(--primary);
            color: var(--primary);
        }

        /* Main Content */
        .tab-content {
            display: none;
            padding: 2rem 0;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tab-content.active {
            display: block;
        }

        /* Dashboard Styles */
        .welcome-banner {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: white;
            padding: 2rem;
            border-radius: var(--border-radius);
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .welcome-content h2 {
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
        }

        .welcome-content p {
            opacity: 0.9;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .quick-action-btn {
            background: var(--card-bg);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            cursor: pointer;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }

        .quick-action-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

        .quick-action-btn i {
            font-size: 2rem;
            color: var(--primary);
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: var(--card-bg);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            display: flex;
            flex-direction: column;
        }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }

        .asset { background: rgba(52, 152, 219, 0.1); color: #3498db; }
        .liability { background: rgba(231, 76, 60, 0.1); color: #e74c3c; }
        .equity { background: rgba(46, 204, 113, 0.1); color: #2ecc71; }
        .income { background: rgba(243, 156, 18, 0.1); color: #f39c12; }

        .stat-value {
            font-size: 1.8rem;
            font-weight: bold;
            margin: 0.5rem 0;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .chart-container {
            background: var(--card-bg);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: 2rem;
            position: relative;
            height: 300px; /* Added fixed height for the chart */
        }

        .chart-title {
            font-size: 1.2rem;
            margin-bottom: 1.5rem;
            font-weight: 600;
        }

        /* Card Styles */
        .card {
            background: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: 1.5rem;
            overflow: hidden;
            transition: var(--transition);
        }

        .card:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .card-header {
            padding: 1.2rem 1.5rem;
            background: rgba(0, 0, 0, 0.03);
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-body {
            padding: 1.5rem;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 1.2rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-primary);
        }

        input, select, textarea {
            width: 100%;
            padding: 0.9rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: var(--transition);
            background: var(--card-bg);
            color: var(--text-primary);
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        button {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.9rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        button:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .btn-danger {
            background: var(--danger);
        }

        .btn-danger:hover {
            background: #c0392b;
        }

        .btn-success {
            background: var(--success);
        }

        .btn-success:hover {
            background: #27ae60;
        }

        .btn-warning {
            background: var(--warning);
        }

        .btn-warning:hover {
            background: #e67e22;
        }

        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }

        th, td {
            padding: 0.9rem;
            text-align: left;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        th {
            background: rgba(0, 0, 0, 0.02);
            font-weight: 600;
            color: var(--text-secondary);
        }

        tr:hover {
            background: rgba(0, 0, 0, 0.02);
        }

        .debit {
            color: var(--success);
            font-weight: 500;
        }

        .credit {
            color: var(--danger);
            font-weight: 500;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(5px);
            animation: fadeIn 0.3s ease;
            padding: 20px;
        }

        .modal-content {
            background: var(--card-bg);
            padding: 2rem;
            border-radius: var(--border-radius);
            width: 100%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .close {
            font-size: 1.5rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .close:hover {
            color: var(--danger);
            transform: rotate(90deg);
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: var(--border-radius);
            color: white;
            opacity: 0;
            transform: translateY(-10px);
            transition: var(--transition);
            z-index: 1100;
            display: flex;
            align-items: center;
            gap: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .notification.show {
            opacity: 1;
            transform: translateY(0);
        }

        .notification.success {
            background: var(--success);
        }

        .notification.error {
            background: var(--danger);
        }

        .notification.warning {
            background: var(--warning);
        }

        /* Footer */
        footer {
            background: var(--card-bg);
            color: var(--text-primary);
            padding: 1.5rem 0;
            margin-top: 2rem;
            text-align: center;
            box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.05);
            transition: var(--transition);
        }

        .footer-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .version {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }

        /* Responsive Styles */
        @media (max-width: 768px) {
            .stats, .quick-actions {
                grid-template-columns: 1fr;
            }

            .welcome-banner {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .tab {
                padding: 0.75rem 1rem;
            }

            .modal-content {
                padding: 1rem;
                width: 95%;
            }

            .footer-content {
                flex-direction: column;
                gap: 1rem;
            }
        }

        /* Dark Mode Toggle */
        .theme-toggle {
            background: none;
            border: none;
            color: var(--text-primary);
            cursor: pointer;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Loading Animation */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 2rem;
            color: var(--text-secondary);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #ccc;
        }

        /* Transaction Entries */
        .transaction-entries {
            margin-bottom: 1.5rem;
        }

        .transaction-entry {
            background: rgba(0, 0, 0, 0.02);
            padding: 1.2rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            position: relative;
        }

        .remove-entry {
            position: absolute;
            top: 10px;
            right: 10px;
            background: var(--danger);
            color: white;
            width: 25px;
            height: 25px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 0.8rem;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        /* Search Box */
        .search-box {
            display: flex;
            margin-bottom: 1.5rem;
        }

        .search-box input {
            border-radius: 8px 0 0 8px;
            border-right: none;
        }

        .search-box button {
            border-radius: 0 8px 8px 0;
        }

        /* Account Hierarchy */
        .account-hierarchy {
            margin-left: 1.5rem;
        }

        .account-item {
            padding: 0.8rem 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .account-item:last-child {
            border-bottom: none;
        }

        .account-children {
            margin-left: 1.5rem;
        }

        .color-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .color-asset { background-color: #3498db; }
        .color-liability { background-color: #e74c3c; }
        .color-equity { background-color: #2ecc71; }
        .color-revenue { background-color: #f39c12; }
        .color-expense { background-color: #9b59b6; }

        /* Filters */
        .filters {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        /* Report Options */
        .report-options {
            background: rgba(0, 0, 0, 0.02);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            margin-bottom: 1.5rem;
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <div class="logo-icon">
                        <i class="fas fa-book"></i>
                    </div>
                    <div>Open<span>Ledger</span></div>
                </div>
                <div id="company-name">Company Name</div>
                <div class="header-actions">
                    <button class="theme-toggle" id="theme-toggle">
                        <i class="fas fa-moon"></i>
                    </button>
                    <button id="help-btn">
                        <i class="fas fa-question-circle"></i> Help
                    </button>
                </div>
            </div>
        </div>
    </header>
    
    <div class="container">
        <div class="nav-tabs">
            <div class="tab active" data-tab="dashboard"><i class="fas fa-tachometer-alt"></i>Dashboard</div>
            <div class="tab" data-tab="journal"><i class="fas fa-book"></i>Journal</div>
            <div class="tab" data-tab="ledger"><i class="fas fa-file-invoice-dollar"></i>Ledger</div>
            <div class="tab" data-tab="trial-balance"><i class="fas fa-balance-scale"></i>Trial Balance</div>
            <div class="tab" data-tab="reports"><i class="fas fa-chart-bar"></i>Reports</div>
            <div class="tab" data-tab="accounts"><i class="fas fa-chart-pie"></i>Chart of Accounts</div>
            <div class="tab" data-tab="settings"><i class="fas fa-cog"></i>Settings</div>
        </div>
        
        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content active">
            <div class="welcome-banner">
                <div class="welcome-content">
                    <h2>Welcome to OpenLedger!</h2>
                    <p>Manage your finances with our easy-to-use accounting software</p>
                </div>
                <button id="quick-add-btn"><i class="fas fa-plus"></i> New Transaction</button>
            </div>
            
            <div class="quick-actions">
                <div class="quick-action-btn" id="action-view-reports">
                    <i class="fas fa-chart-pie"></i>
                    <span>View Reports</span>
                </div>
                <div class="quick-action-btn" id="action-add-account">
                    <i class="fas fa-plus-circle"></i>
                    <span>Add Account</span>
                </div>
                <div class="quick-action-btn" id="action-trial-balance">
                    <i class="fas fa-balance-scale"></i>
                    <span>Trial Balance</span>
                </div>
                <div class="quick-action-btn" id="action-export-data">
                    <i class="fas fa-file-export"></i>
                    <span>Export Data</span>
                </div>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-header">
                        <h3>Total Assets</h3>
                        <div class="stat-icon asset">
                            <i class="fas fa-wallet"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="total-assets">$0.00</div>
                    <div class="stat-label">Current value of all assets</div>
                </div>
                <div class="stat-card">
                    <div class="stat-header">
                        <h3>Total Liabilities</h3>
                        <div class="stat-icon liability">
                            <i class="fas fa-hand-holding-usd"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="total-liabilities">$0.00</div>
                    <div class="stat-label">Current value of all liabilities</div>
                </div>
                <div class="stat-card">
                    <div class="stat-header">
                        <h3>Equity</h3>
                        <div class="stat-icon equity">
                            <i class="fas fa-chart-line"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="total-equity">$0.00</div>
                    <div class="stat-label">Owner's equity value</div>
                </div>
                <div class="stat-card">
                    <div class="stat-header">
                        <h3>Net Income</h3>
                        <div class="stat-icon income">
                            <i class="fas fa-money-bill-wave"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="net-income">$0.00</div>
                    <div class="stat-label">Revenue minus expenses</div>
                </div>
            </div>
            
            <div class="chart-container">
                <div class="chart-title">Financial Health Overview</div>
                <canvas id="financial-health-chart"></canvas>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <span>Recent Transactions</span>
                    <button id="refresh-dashboard"><i class="fas fa-sync-alt"></i>Refresh</button>
                </div>
                <div class="card-body">
                    <table id="recent-transactions">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Account</th>
                                <th>Debit</th>
                                <th>Credit</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="empty-state-row">
                                <td colspan="5" class="empty-state">
                                    <i class="fas fa-receipt"></i>
                                    <p>No transactions yet</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <span>Recent Activity</span>
                </div>
                <div class="card-body">
                    <ul class="recent-activity" id="recent-activity-list">
                        <li>No recent activity</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <!-- Journal Tab -->
        <div id="journal" class="tab-content">
            <h2>Journal Entries</h2>
            <button id="add-transaction-btn" style="margin-bottom: 1.5rem;"><i class="fas fa-plus"></i>Add New Transaction</button>
            
            <div class="search-box">
                <input type="text" id="journal-search" placeholder="Search journal entries...">
                <button id="journal-search-btn"><i class="fas fa-search"></i></button>
            </div>
            
            <div class="filters">
                <div class="filter-group">
                    <label for="journal-date-from">From:</label>
                    <input type="date" id="journal-date-from">
                </div>
                <div class="filter-group">
                    <label for="journal-date-to">To:</label>
                    <input type="date" id="journal-date-to">
                </div>
                <div class="filter-group">
                    <label for="journal-account">Account:</label>
                    <select id="journal-account">
                        <option value="">All Accounts</option>
                    </select>
                </div>
                <button id="apply-journal-filter"><i class="fas fa-filter"></i>Apply Filter</button>
                <button id="clear-journal-filter" class="btn-warning"><i class="fas fa-times"></i>Clear Filter</button>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <span>Journal Entries</span>
                    <div>
                        <span class="tooltip">
                            <i class="fas fa-info-circle"></i>
                            <span class="tooltiptext">Double-click on a transaction to edit it</span>
                        </span>
                        <button id="export-journal"><i class="fas fa-download"></i>Export</button>
                    </div>
                </div>
                <div class="card-body">
                    <table id="journal-table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Account</th>
                                <th>Debit</th>
                                <th>Credit</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="empty-state-row">
                                <td colspan="6" class="empty-state">
                                    <i class="fas fa-book"></i>
                                    <p>No journal entries yet</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <div id="journal-pagination" class="pagination" style="display: none;">
                        <button id="journal-prev"><i class="fas fa-chevron-left"></i> Previous</button>
                        <span id="journal-page-info">Page 1 of 1</span>
                        <button id="journal-next">Next <i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Ledger Tab -->
        <div id="ledger" class="tab-content">
            <h2>General Ledger</h2>
            
            <div class="filters">
                <div class="filter-group">
                    <label for="ledger-account">Account:</label>
                    <select id="ledger-account">
                        <option value="">Select Account</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="ledger-date-from">From:</label>
                    <input type="date" id="ledger-date-from">
                </div>
                <div class="filter-group">
                    <label for="ledger-date-to">To:</label>
                    <input type="date" id="ledger-date-to">
                </div>
                <button id="apply-ledger-filter"><i class="fas fa-filter"></i>Apply Filter</button>
                <button id="clear-ledger-filter" class="btn-warning"><i class="fas fa-times"></i>Clear Filter</button>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <span>General Ledger</span>
                    <div>
                        <button id="print-ledger"><i class="fas fa-print"></i>Print</button>
                        <button id="export-ledger" style="margin-left: 0.5rem;"><i class="fas fa-download"></i>Export</button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="ledger-account-info" style="margin-bottom: 1rem; padding: 1rem; background: rgba(0, 0, 0, 0.02); border-radius: var(--border-radius); display: none;">
                        <h3 id="ledger-account-name"></h3>
                        <p>Type: <span id="ledger-account-type"></span></p>
                        <p>Current Balance: <span id="ledger-account-balance"></span></p>
                    </div>
                    <table id="ledger-table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Ref</th>
                                <th>Debit</th>
                                <th>Credit</th>
                                <th>Balance</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="empty-state-row">
                                <td colspan="6" class="empty-state">
                                    <i class="fas fa-file-invoice-dollar"></i>
                                    <p>Select an account to view ledger</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Trial Balance Tab -->
        <div id="trial-balance" class="tab-content">
            <h2>Trial Balance</h2>
            
            <div class="filters">
                <div class="filter-group">
                    <label for="tb-date">As of:</label>
                    <input type="date" id="tb-date">
                </div>
                <button id="generate-tb"><i class="fas fa-calculator"></i>Generate Trial Balance</button>
                <button id="export-tb"><i class="fas fa-download"></i>Export</button>
                <button id="print-tb"><i class="fas fa-print"></i>Print</button>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <span>Trial Balance</span>
                    <span id="tb-status"></span>
                </div>
                <div class="card-body">
                    <div id="tb-summary" style="margin-bottom: 1rem; display: none;">
                        <p>Total Debit: <span id="tb-total-debit" class="debit">$0.00</span></p>
                        <p>Total Credit: <span id="tb-total-credit" class="credit">$0.00</span></p>
                        <p>Difference: <span id="tb-difference">$0.00</span></p>
                    </div>
                    <table id="trial-balance-table">
                        <thead>
                            <tr>
                                <th>Account</th>
                                <th>Debit</th>
                                <th>Credit</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="empty-state-row">
                                <td colspan="3" class="empty-state">
                                    <i class="fas fa-balance-scale"></i>
                                    <p>Generate trial balance to view data</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Reports Tab -->
        <div id="reports" class="tab-content">
            <h2>Financial Reports</h2>
            
            <div class="report-options">
                <div class="form-group">
                    <label for="report-type">Report Type:</label>
                    <select id="report-type">
                        <option value="income-statement">Income Statement</option>
                        <option value="balance-sheet">Balance Sheet</option>
                        <option value="cash-flow">Cash Flow Statement</option>
                        <option value="changes-equity">Statement of Changes in Equity</option>
                        <option value="general-ledger">General Ledger Summary</option>
                        <option value="account-detail">Account Detail</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="report-style">Report Style:</label>
                    <select id="report-style">
                        <option value="standard">Standard</option>
                        <option value="comparative">Comparative</option>
                        <option value="common-size">Common Size</option>
                    </select>
                </div>
                
                <div class="filters">
                    <div class="filter-group">
                        <label for="report-period">Period:</label>
                        <select id="report-period">
                            <option value="monthly">Monthly</option>
                            <option value="quarterly">Quarterly</option>
                            <option value="annual">Annual</option>
                            <option value="custom">Custom</option>
                        </select>
                    </div>
                    <div class="filter-group" id="report-custom-dates" style="display: none;">
                        <label for="report-date-from">From:</label>
                        <input type="date" id="report-date-from">
                    </div>
                    <div class="filter-group" id="report-custom-dates-to">
                        <label for="report-date-to">To:</label>
                        <input type="date" id="report-date-to">
                    </div>
                    <div class="filter-group">
                        <label for="report-date">Date:</label>
                        <input type="date" id="report-date">
                    </div>
                    <button id="generate-report"><i class="fas fa-chart-bar"></i>Generate Report</button>
                    <button id="export-report"><i class="fas fa-download"></i>Export as PDF</button>
                    <button id="print-report"><i class="fas fa-print"></i>Print</button>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header" id="report-title">Report Preview</div>
                <div class="card-body">
                    <div id="report-content">
                        <div class="empty-state">
                            <i class="fas fa-chart-bar"></i>
                            <p>Select report options and generate to view</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Chart of Accounts Tab -->
        <div id="accounts" class="tab-content">
            <h2>Chart of Accounts</h2>
            <button id="add-account-btn" style="margin-bottom: 1.5rem;"><i class="fas fa-plus"></i>Add New Account</button>
            
            <div class="search-box">
                <input type="text" id="account-search" placeholder="Search accounts...">
                <button id="account-search-btn"><i class="fas fa-search"></i></button>
            </div>
            
            <div class="filters">
                <div class="filter-group">
                    <label for="account-type-filter">Filter by Type:</label>
                    <select id="account-type-filter">
                        <option value="">All Types</option>
                        <option value="Asset">Assets</option>
                        <option value="Liability">Liabilities</option>
                        <option value="Equity">Equity</option>
                        <option value="Revenue">Revenue</option>
                        <option value="Expense">Expenses</option>
                    </select>
                </div>
                <button id="apply-account-filter"><i class="fas fa-filter"></i>Apply Filter</button>
                <button id="clear-account-filter" class="btn-warning"><i class="fas fa-times"></i>Clear Filter</button>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <span>Chart of Accounts</span>
                    <button id="refresh-accounts"><i class="fas fa-sync-alt"></i>Refresh</button>
                </div>
                <div class="card-body">
                    <div class="account-hierarchy" id="accounts-hierarchy">
                        <div class="empty-state">
                            <i class="fas fa-chart-pie"></i>
                            <p>No accounts yet</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <span>Account List</span>
                </div>
                <div class="card-body">
                    <table id="accounts-table">
                        <thead>
                            <tr>
                                <th>Code</th>
                                <th>Account Name</th>
                                <th>Type</th>
                                <th>Balance</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="empty-state-row">
                                <td colspan="5" class="empty-state">
                                    <i class="fas fa-chart-pie"></i>
                                    <p>No accounts yet</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Settings Tab -->
        <div id="settings" class="tab-content">
            <h2>Application Settings</h2>
            
            <div class="card">
                <div class="card-header">Company Information</div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="company-name-input">Company Name:</label>
                        <input type="text" id="company-name-input" placeholder="Enter company name">
                    </div>
                    
                    <div class="form-group">
                        <label for="company-address">Company Address:</label>
                        <textarea id="company-address" placeholder="Enter company address"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="company-phone">Phone Number:</label>
                        <input type="text" id="company-phone" placeholder="Enter phone number">
                    </div>
                    
                    <div class="form-group">
                        <label for="company-email">Email Address:</label>
                        <input type="email" id="company-email" placeholder="Enter email address">
                    </div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">Accounting Configuration</div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="accounting-mode">Accounting Mode:</label>
                        <select id="accounting-mode">
                            <option value="double">Double-Entry</option>
                            <option value="single">Single-Entry</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="accounting-basis">Accounting Basis:</label>
                        <select id="accounting-basis">
                            <option value="accrual">Accrual Basis</option>
                            <option value="cash">Cash Basis</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="base-currency">Base Currency:</label>
                        <select id="base-currency">
                            <option value="USD">US Dollar (USD)</option>
                            <option value="EUR">Euro (EUR)</option>
                            <option value="GBP">British Pound (GBP)</option>
                            <option value="JPY">Japanese Yen (JPY)</option>
                            <option value="CAD">Canadian Dollar (CAD)</option>
                            <option value="AUD">Australian Dollar (AUD)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="financial-year">Financial Year Start:</label>
                        <input type="date" id="financial-year">
                    </div>
                    
                    <button id="save-settings"><i class="fas fa-save"></i>Save Settings</button>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">Data Management</div>
                <div class="card-body">
                    <button id="export-data" style="margin-right: 1rem;"><i class="fas fa-download"></i>Export All Data</button>
                    <button id="import-data" style="margin-right: 1rem;"><i class="fas fa-upload"></i>Import Data</button>
                    <button id="clear-data" class="btn-danger"><i class="fas fa-trash"></i>Clear All Data</button>
                    <button id="backup-data" style="margin-top: 1rem;"><i class="fas fa-database"></i>Create Backup</button>
                    <button id="restore-data" style="margin-top: 1rem;"><i class="fas fa-history"></i>Restore Backup</button>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">Sample Data</div>
                <div class="card-body">
                    <p>Load sample data to test the application:</p>
                    <button id="load-sample-data" class="btn-success"><i class="fas fa-database"></i>Load Sample Data</button>
                </div>
            </div>

            <div class="card">
                <div class="card-header">Security</div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="auto-logout">Auto Logout (minutes):</label>
                        <input type="number" id="auto-logout" min="1" max="120" value="30">
                    </div>
                    <button id="change-password"><i class="fas fa-key"></i>Change Password</button>
                </div>
            </div>

            <div class="card">
                <div class="card-header">About OpenLedger</div>
                <div class="card-body">
                    <p>OpenLedger v1.2.0 - Universal Accounting Engine</p>
                    <p>Developed with <i class="fas fa-heart" style="color: #e74c3c;"></i> for small businesses and accountants</p>
                    <p>&copy; 2023 OpenLedger Project</p>
                </div>
            </div>
        </div>
    </div>

    <footer>
        <div class="container">
            <div class="footer-content">
                <div>OpenLedger &copy; 2023 | Universal Accounting Engine</div>
                <div class="version">v1.2.0</div>
            </div>
        </div>
    </footer>
    
    <!-- Transaction Modal -->
    <div id="transaction-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-plus-circle"></i> Add New Transaction</h3>
                <span class="close">&times;</span>
            </div>
            <form id="transaction-form">
                <div class="form-group">
                    <label for="transaction-date">Date:</label>
                    <input type="date" id="transaction-date" required>
                </div>
                
                <div class="form-group">
                    <label for="transaction-description">Description:</label>
                    <input type="text" id="transaction-description" placeholder="Enter description" required>
                </div>
                
                <div class="form-group">
                    <label for="transaction-reference">Reference:</label>
                    <input type="text" id="transaction-reference" placeholder="Optional reference number">
                </div>
                
                <div id="transaction-entries">
                    <div class="transaction-entry">
                        <div class="form-group">
                            <label for="debit-account">Account:</label>
                            <select class="entry-account" required>
                                <option value="">Select Account</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Amount:</label>
                            <div style="display: flex; gap: 10px;">
                                <div style="flex: 1;">
                                    <label for="debit-amount">Debit</label>
                                    <input type="number" class="debit-amount" step="0.01" min="0" placeholder="0.00">
                                </div>
                                <div style="flex: 1;">
                                    <label for="credit-amount">Credit</label>
                                    <input type="number" class="credit-amount" step="0.01" min="0" placeholder="0.00">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <button type="button" id="add-entry-btn" class="btn-success" style="margin-bottom: 1rem;"><i class="fas fa-plus"></i> Add Another Entry</button>
                
                <div class="form-group">
                    <label for="narration">Notes:</label>
                    <textarea id="narration" placeholder="Additional details"></textarea>
                </div>
                
                <div class="form-group" style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong>Total Debit: <span id="total-debit-amount">$0.00</span></strong>
                    </div>
                    <div>
                        <strong>Total Credit: <span id="total-credit-amount">$0.00</span></strong>
                    </div>
                </div>
                
                <div class="form-group" id="transaction-balance-check" style="color: var(--danger); font-weight: bold; display: none;">
                    <i class="fas fa-exclamation-triangle"></i> Debits and credits are not balanced!
                </div>
                
                <div class="form-group">
                    <button type="submit" id="save-transaction-btn"><i class="fas fa-save"></i> Save Transaction</button>
                    <button type="button" id="cancel-transaction" style="background: var(--secondary); margin-left: 10px;"><i class="fas fa-times"></i> Cancel</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Account Modal -->
    <div id="account-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="account-modal-title"><i class="fas fa-plus-circle"></i> Add New Account</h3>
                <span class="close">&times;</span>
            </div>
            <form id="account-form">
                <div class="form-group">
                    <label for="account-code">Account Code:</label>
                    <input type="text" id="account-code" placeholder="e.g., 1010" required>
                </div>
                
                <div class="form-group">
                    <label for="account-name">Account Name:</label>
                    <input type="text" id="account-name" placeholder="e.g., Cash" required>
                </div>
                
                <div class="form-group">
                    <label for="account-type">Account Type:</label>
                    <select id="account-type" required>
                        <option value="">Select Type</option>
                        <option value="Asset">Asset</option>
                        <option value="Liability">Liability</option>
                        <option value="Equity">Equity</option>
                        <option value="Revenue">Revenue</option>
                        <option value="Expense">Expense</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="account-subtype">Account Subtype:</label>
                    <select id="account-subtype">
                        <option value="">Select Subtype (Optional)</option>
                        <option value="Current Asset">Current Asset</option>
                        <option value="Fixed Asset">Fixed Asset</option>
                        <option value="Current Liability">Current Liability</option>
                        <option value="Long-term Liability">Long-term Liability</option>
                        <option value="Operating Revenue">Operating Revenue</option>
                        <option value="Non-operating Revenue">Non-operating Revenue</option>
                        <option value="Operating Expense">Operating Expense</option>
                        <option value="Non-operating Expense">Non-operating Expense</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="parent-account">Parent Account (Optional):</label>
                    <select id="parent-account">
                        <option value="">No Parent Account</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="opening-balance">Opening Balance:</label>
                    <input type="number" id="opening-balance" step="0.01" placeholder="0.00">
                    <small>Positive for Assets/Expenses, Negative for Liabilities/Equity/Revenue</small>
                </div>
                
                <div class="form-group">
                    <label for="account-description">Description (Optional):</label>
                    <textarea id="account-description" placeholder="Account description"></textarea>
                </div>
                
                <div class="form-group">
                    <button type="submit"><i class="fas fa-save"></i> Save Account</button>
                    <button type="button" id="cancel-account" style="background: var(--secondary); margin-left: 10px;"><i class="fas fa-times"></i> Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Password Modal -->
    <div id="password-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-key"></i> Change Password</h3>
                <span class="close">&times;</span>
            </div>
            <form id="password-form">
                <div class="form-group">
                    <label for="current-password">Current Password:</label>
                    <input type="password" id="current-password" required>
                </div>
                
                <div class="form-group">
                    <label for="new-password">New Password:</label>
                    <input type="password" id="new-password" required>
                </div>
                
                <div class="form-group">
                    <label for="confirm-password">Confirm Password:</label>
                    <input type="password" id="confirm-password" required>
                </div>
                
                <div class="form-group">
                    <button type="submit"><i class="fas fa-save"></i> Change Password</button>
                    <button type="button" id="cancel-password" style="background: var(--secondary); margin-left: 10px;"><i class="fas fa-times"></i> Cancel</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Help Modal -->
    <div id="help-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-question-circle"></i> OpenLedger Help</h3>
                <span class="close">&times;</span>
            </div>
            <div class="card-body">
                <h3>Getting Started</h3>
                <p>Welcome to OpenLedger! Follow these steps to get started:</p>
                <ol>
                    <li>Set up your company information in Settings</li>
                    <li>Add your accounts in the Chart of Accounts</li>
                    <li>Start recording transactions in the Journal</li>
                    <li>Generate reports to view your financial statements</li>
                </ol>
                
                <h3>Video Tutorials</h3>
                <p>Check out our video tutorials for a guided walkthrough:</p>
                <ul>
                    <li><a href="#">Setting up your accounts</a></li>
                    <li><a href="#">Recording transactions</a></li>
                    <li><a href Generating financial reports</a></li>
                </ul>
                
                <h3>Need more help?</h3>
                <p>Contact our support team at support@openledger.com or visit our knowledge base at help.openledger.com</p>
            </div>
        </div>
    </div>
    
    <!-- Notification -->
    <div id="notification" class="notification"></div>
    
    <!-- Hidden file input for import -->
    <input type="file" id="import-file" style="display: none;" accept=".json,.csv">
    <input type="file" id="restore-file" style="display: none;" accept=".json">
    
    <script>
        // Main application object
        const OpenLedger = {
            // Application state
            settings: {
                accountingMode: 'double',
                accountingBasis: 'accrual',
                companyName: 'Company Name',
                baseCurrency: 'USD',
                financialYear: new Date(new Date().getFullYear(), 0, 1).toISOString().split('T')[0],
                autoLogout: 30,
                password: null
            },
            accounts: [],
            transactions: [],
            idleTimer: null,
            currentUser: null,
            financialChart: null,
            
            // Initialize the application
            init() {
                this.loadData();
                this.setupEventListeners();
                this.renderAccounts();
                this.renderTransactions();
                this.updateDashboard();
                this.setCurrentDate();
                this.setupIdleTimer();
                
                // Add sample accounts if no accounts exist
                if (this.accounts.length === 0) {
                    this.createDefaultAccounts();
                }
                
                // Show welcome message for first-time users
                if (!localStorage.getItem('openledger-welcome-shown')) {
                    setTimeout(() => {
                        this.showNotification('Welcome to OpenLedger! Start by adding your accounts and transactions.', 'success');
                        localStorage.setItem('openledger-welcome-shown', 'true');
                    }, 2000);
                }
            },
            
            // Setup idle timer for auto logout
            setupIdleTimer() {
                this.resetIdleTimer();
                
                // Events that reset the timer
                ['mousedown', 'keydown', 'touchstart'].forEach(event => {
                    document.addEventListener(event, () => {
                        this.resetIdleTimer();
                    });
                });
            },
            
            resetIdleTimer() {
                if (this.idleTimer) {
                    clearTimeout(this.idleTimer);
                }
                
                const timeout = this.settings.autoLogout * 60 * 1000;
                this.idleTimer = setTimeout(() => {
                    this.showNotification('You have been logged out due to inactivity', 'warning');
                    // In a real app, you would redirect to login
                }, timeout);
            },
            
            // Create default accounts if none exist
            createDefaultAccounts() {
                const defaultAccounts = [
                    { id: 'acc-1', code: '1010', name: 'Cash', type: 'Asset', subtype: 'Current Asset', openingBalance: 0, parent: null },
                    { id: 'acc-2', code: '1020', name: 'Accounts Receivable', type: 'Asset', subtype: 'Current Asset', openingBalance: 0, parent: null },
                    { id: 'acc-3', code: '1030', name: 'Inventory', type: 'Asset', subtype: 'Current Asset', openingBalance: 0, parent: null },
                    { id: 'acc-4', code: '1040', name: 'Equipment', type: 'Asset', subtype: 'Fixed Asset', openingBalance: 0, parent: null },
                    { id: 'acc-5', code: '2010', name: 'Accounts Payable', type: 'Liability', subtype: 'Current Liability', openingBalance: 0, parent: null },
                    { id: 'acc-6', code: '2020', name: 'Loans Payable', type: 'Liability', subtype: 'Long-term Liability', openingBalance: 0, parent: null },
                    { id: 'acc-7', code: '3010', name: 'Common Stock', type: 'Equity', subtype: '', openingBalance: 0, parent: null },
                    { id: 'acc-8', code: '3020', name: 'Retained Earnings', type: 'Equity', subtype: '', openingBalance: 0, parent: null },
                    { id: 'acc-9', code: '4010', name: 'Sales Revenue', type: 'Revenue', subtype: 'Operating Revenue', openingBalance: 0, parent: null },
                    { id: 'acc-10', code: '5010', name: 'Cost of Goods Sold', type: 'Expense', subtype: 'Operating Expense', openingBalance: 0, parent: null },
                    { id: 'acc-11', code: '5020', name: 'Rent Expense', type: 'Expense', subtype: 'Operating Expense', openingBalance: 0, parent: null },
                    { id: 'acc-12', code: '5030', name: 'Salaries Expense', type: 'Expense', subtype: 'Operating Expense', openingBalance: 0, parent: null }
                ];
                
                this.accounts = defaultAccounts;
                this.saveData();
                this.renderAccounts();
            },
            
            // Load data from localStorage
            loadData() {
                try {
                    const settings = localStorage.getItem('openledger-settings');
                    const accounts = localStorage.getItem('openledger-accounts');
                    const transactions = localStorage.getItem('openledger-transactions');
                    
                    if (settings) this.settings = JSON.parse(settings);
                    if (accounts) this.accounts = JSON.parse(accounts);
                    if (transactions) this.transactions = JSON.parse(transactions);
                    
                    // Update UI with settings
                    document.getElementById('accounting-mode').value = this.settings.accountingMode;
                    document.getElementById('accounting-basis').value = this.settings.accountingBasis;
                    document.getElementById('company-name-input').value = this.settings.companyName;
                    document.getElementById('base-currency').value = this.settings.baseCurrency;
                    document.getElementById('financial-year').value = this.settings.financialYear;
                    document.getElementById('auto-logout').value = this.settings.autoLogout;
                    document.getElementById('company-name').textContent = this.settings.companyName;
                } catch (e) {
                    console.error('Error loading data from localStorage:', e);
                    this.showNotification('Error loading saved data', 'error');
                }
            },
            
            // Save data to localStorage
            saveData() {
                try {
                    localStorage.setItem('openledger-settings', JSON.stringify(this.settings));
                    localStorage.setItem('openledger-accounts', JSON.stringify(this.accounts));
                    localStorage.setItem('openledger-transactions', JSON.stringify(this.transactions));
                } catch (e) {
                    console.error('Error saving data to localStorage:', e);
                    this.showNotification('Error saving data', 'error');
                }
            },
            
            // Set current date in date fields
            setCurrentDate() {
                const today = new Date().toISOString().split('T')[0];
                const firstOfMonth = new Date();
                firstOfMonth.setDate(1);
                const firstOfMonthStr = firstOfMonth.toISOString().split('T')[0];
                
                document.getElementById('transaction-date').value = today;
                document.getElementById('journal-date-from').value = firstOfMonthStr;
                document.getElementById('journal-date-to').value = today;
                document.getElementById('ledger-date-from').value = firstOfMonthStr;
                document.getElementById('ledger-date-to').value = today;
                document.getElementById('tb-date').value = today;
                document.getElementById('report-date').value = today;
                document.getElementById('report-date-from').value = firstOfMonthStr;
                document.getElementById('report-date-to').value = today;
            },
            
            // Setup event listeners
            setupEventListeners() {
                // Tab navigation
                document.querySelectorAll('.tab').forEach(tab => {
                    tab.addEventListener('click', () => {
                        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                        
                        tab.classList.add('active');
                        document.getElementById(tab.dataset.tab).classList.add('active');
                        
                        // Refresh data when switching to specific tabs
                        if (tab.dataset.tab === 'dashboard') {
                            this.updateDashboard();
                        } else if (tab.dataset.tab === 'accounts') {
                            this.renderAccounts();
                        }
                    });
                });
                
                // Theme toggle
                document.getElementById('theme-toggle').addEventListener('click', () => {
                    document.body.classList.toggle('dark-mode');
                    const icon = document.getElementById('theme-toggle').querySelector('i');
                    if (document.body.classList.contains('dark-mode')) {
                        icon.classList.remove('fa-moon');
                        icon.classList.add('fa-sun');
                    } else {
                        icon.classList.remove('fa-sun');
                        icon.classList.add('fa-moon');
                    }
                });
                
                // Help button
                document.getElementById('help-btn').addEventListener('click', () => {
                    document.getElementById('help-modal').style.display = 'flex';
                });
                
                // Modal controls
                document.querySelectorAll('.close').forEach(close => {
                    close.addEventListener('click', () => {
                        document.querySelectorAll('.modal').forEach(modal => {
                            modal.style.display = 'none';
                        });
                    });
                });
                
                // Close modal when clicking outside
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.addEventListener('click', (e) => {
                        if (e.target === modal) {
                            modal.style.display = 'none';
                        }
                    });
                });
                
                // Cancel buttons
                document.getElementById('cancel-transaction').addEventListener('click', () => {
                    document.getElementById('transaction-modal').style.display = 'none';
                });
                
                document.getElementById('cancel-account').addEventListener('click', () => {
                    document.getElementById('account-modal').style.display = 'none';
                });
                
                document.getElementById('cancel-password').addEventListener('click', () => {
                    document.getElementById('password-modal').style.display = 'none';
                });
                
                // Quick action buttons
                document.getElementById('quick-add-btn').addEventListener('click', () => {
                    this.showTransactionModal();
                });
                
                document.getElementById('action-view-reports').addEventListener('click', () => {
                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                    
                    document.querySelector('[data-tab="reports"]').classList.add('active');
                    document.getElementById('reports').classList.add('active');
                });
                
                document.getElementById('action-add-account').addEventListener('click', () => {
                    document.getElementById('account-modal-title').textContent = 'Add New Account';
                    document.getElementById('account-form').reset();
                    this.populateParentAccountDropdown();
                    document.getElementById('account-modal').style.display = 'flex';
                });
                
                document.getElementById('action-trial-balance').addEventListener('click', () => {
                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                    
                    document.querySelector('[data-tab="trial-balance"]').classList.add('active');
                    document.getElementById('trial-balance').classList.add('active');
                });
                
                document.getElementById('action-export-data').addEventListener('click', () => {
                    this.exportData();
                });
                
                // Add transaction button
                document.getElementById('add-transaction-btn').addEventListener('click', () => {
                    this.showTransactionModal();
                });
                
                // Add account button
                document.getElementById('add-account-btn').addEventListener('click', () => {
                    document.getElementById('account-modal-title').textContent = 'Add New Account';
                    document.getElementById('account-form').reset();
                    this.populateParentAccountDropdown();
                    document.getElementById('account-modal').style.display = 'flex';
                });
                
                // Change password button
                document.getElementById('change-password').addEventListener('click', () => {
                    document.getElementById('password-modal').style.display = 'flex';
                });
                
                // Password form submission
                document.getElementById('password-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.changePassword();
                });
                
                // Save settings
                document.getElementById('save-settings').addEventListener('click', () => {
                    this.saveSettings();
                });
                
                // Transaction form submission
                document.getElementById('transaction-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.addTransaction();
                });
                
                // Account form submission
                document.getElementById('account-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.addAccount();
                });
                
                // Add another entry to transaction form
                document.getElementById('add-entry-btn').addEventListener('click', () => {
                    this.addTransactionEntry();
                });
                
                // Real-time validation for transaction amounts
                document.getElementById('transaction-entries').addEventListener('input', () => {
                    this.calculateTransactionTotals();
                });
                
                // Export data
                document.getElementById('export-data').addEventListener('click', () => {
                    this.exportData();
                });
                
                // Import data
                document.getElementById('import-data').addEventListener('click', () => {
                    document.getElementById('import-file').click();
                });
                
                document.getElementById('import-file').addEventListener('change', (e) => {
                    this.importData(e.target.files[0]);
                    e.target.value = ''; // Reset file input
                });
                
                // Backup data
                document.getElementById('backup-data').addEventListener('click', () => {
                    this.createBackup();
                });
                
                // Restore data
                document.getElementById('restore-data').addEventListener('click', () => {
                    document.getElementById('restore-file').click();
                });
                
                document.getElementById('restore-file').addEventListener('change', (e) => {
                    this.restoreBackup(e.target.files[0]);
                    e.target.value = ''; // Reset file input
                });
                
                // Clear data
                document.getElementById('clear-data').addEventListener('click', () => {
                    this.clearData();
                });
                
                // Load sample data
                document.getElementById('load-sample-data').addEventListener('click', () => {
                    this.loadSampleData();
                });
                
                // Generate trial balance
                document.getElementById('generate-tb').addEventListener('click', () => {
                    this.generateTrialBalance();
                });
                
                // Export trial balance
                document.getElementById('export-tb').addEventListener('click', () => {
                    this.exportTrialBalance();
                });
                
                // Print trial balance
                document.getElementById('print-tb').addEventListener('click', () => {
                    this.printTrialBalance();
                });
                
                // Apply journal filter
                document.getElementById('apply-journal-filter').addEventListener('click', () => {
                    this.renderTransactions();
                });
                
                // Clear journal filter
                document.getElementById('clear-journal-filter').addEventListener('click', () => {
                    document.getElementById('journal-date-from').value = '';
                    document.getElementById('journal-date-to').value = '';
                    document.getElementById('journal-account').value = '';
                    document.getElementById('journal-search').value = '';
                    this.renderTransactions();
                });
                
                // Export journal
                document.getElementById('export-journal').addEventListener('click', () => {
                    this.exportJournal();
                });
                
                // Journal search
                document.getElementById('journal-search-btn').addEventListener('click', () => {
                    this.renderTransactions();
                });
                
                document.getElementById('journal-search').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.renderTransactions();
                    }
                });
                
                // Apply ledger filter
                document.getElementById('apply-ledger-filter').addEventListener('click', () => {
                    this.renderLedger();
                });
                
                // Clear ledger filter
                document.getElementById('clear-ledger-filter').addEventListener('click', () => {
                    document.getElementById('ledger-account').value = '';
                    document.getElementById('ledger-date-from').value = '';
                    document.getElementById('ledger-date-to').value = '';
                    this.renderLedger();
                });
                
                // Print ledger
                document.getElementById('print-ledger').addEventListener('click', () => {
                    this.printLedger();
                });
                
                // Export ledger
                document.getElementById('export-ledger').addEventListener('click', () => {
                    this.exportLedger();
                });
                
                // Generate report
                document.getElementById('generate-report').addEventListener('click', () => {
                    this.generateReport();
                });
                
                // Export report
                document.getElementById('export-report').addEventListener('click', () => {
                    this.exportReportPDF();
                });
                
                // Print report
                document.getElementById('print-report').addEventListener('click', () => {
                    this.printReport();
                });
                
                // Report period change
                document.getElementById('report-period').addEventListener('change', (e) => {
                    if (e.target.value === 'custom') {
                        document.getElementById('report-custom-dates').style.display = 'flex';
                        document.getElementById('report-date').style.display = 'none';
                    } else {
                        document.getElementById('report-custom-dates').style.display = 'none';
                        document.getElementById('report-date').style.display = 'flex';
                    }
                });
                
                // Refresh dashboard
                document.getElementById('refresh-dashboard').addEventListener('click', () => {
                    this.updateDashboard();
                    this.showNotification('Dashboard refreshed', 'success');
                });
                
                // Refresh accounts
                document.getElementById('refresh-accounts').addEventListener('click', () => {
                    this.renderAccounts();
                    this.showNotification('Accounts refreshed', 'success');
                });
                
                // Apply account filter
                document.getElementById('apply-account-filter').addEventListener('click', () => {
                    this.renderAccounts();
                });
                
                // Clear account filter
                document.getElementById('clear-account-filter').addEventListener('click', () => {
                    document.getElementById('account-type-filter').value = '';
                    document.getElementById('account-search').value = '';
                    this.renderAccounts();
                });
                
                // Account search
                document.getElementById('account-search-btn').addEventListener('click', () => {
                    this.renderAccounts();
                });
                
                document.getElementById('account-search').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.renderAccounts();
                    }
                });
            },
            
            // Show transaction modal with proper setup
            showTransactionModal() {
                document.getElementById('transaction-modal').style.display = 'flex';
                document.getElementById('transaction-form').reset();
                
                // Clear any existing entries except the first one
                const entriesContainer = document.getElementById('transaction-entries');
                while (entriesContainer.children.length > 1) {
                    entriesContainer.removeChild(entriesContainer.lastChild);
                }
                
                // Set up the first entry
                const firstEntry = entriesContainer.querySelector('.transaction-entry');
                firstEntry.querySelector('.debit-amount').value = '';
                firstEntry.querySelector('.credit-amount').value = '';
                
                // Populate account dropdowns
                this.populateAccountDropdowns();
                
                // Set today's date
                document.getElementById('transaction-date').value = new Date().toISOString().split('T')[0];
                
                // Reset totals
                document.getElementById('total-debit-amount').textContent = this.formatCurrency(0);
                document.getElementById('total-credit-amount').textContent = this.formatCurrency(0);
                document.getElementById('transaction-balance-check').style.display = 'none';
            },
            
            // Add another entry to the transaction form
            addTransactionEntry() {
                const entriesContainer = document.getElementById('transaction-entries');
                const newEntry = entriesContainer.querySelector('.transaction-entry').cloneNode(true);
                
                // Clear values
                newEntry.querySelector('.entry-account').value = '';
                newEntry.querySelector('.debit-amount').value = '';
                newEntry.querySelector('.credit-amount').value = '';
                
                // Add remove button
                const removeBtn = document.createElement('div');
                removeBtn.className = 'remove-entry';
                removeBtn.innerHTML = '<i class="fas fa-times"></i>';
                removeBtn.addEventListener('click', () => {
                    entriesContainer.removeChild(newEntry);
                    this.calculateTransactionTotals();
                });
                
                newEntry.appendChild(removeBtn);
                entriesContainer.appendChild(newEntry);
                
                // Populate account dropdown for the new entry
                this.populateAccountDropdown(newEntry.querySelector('.entry-account'));
            },
            
            // Populate all account dropdowns in transaction form
            populateAccountDropdowns() {
                document.querySelectorAll('.entry-account').forEach(dropdown => {
                    this.populateAccountDropdown(dropdown);
                });
            },
            
            // Populate a single account dropdown
            populateAccountDropdown(dropdown) {
                // Clear existing options except the first one
                while (dropdown.options.length > 1) {
                    dropdown.remove(1);
                }
                
                // Add accounts
                this.accounts.forEach(account => {
                    const option = document.createElement('option');
                    option.value = account.id;
                    option.textContent = `${account.code} - ${account.name}`;
                    dropdown.appendChild(option);
                });
            },
            
            // Populate parent account dropdown
            populateParentAccountDropdown() {
                const dropdown = document.getElementById('parent-account');
                
                // Clear existing options except the first one
                while (dropdown.options.length > 1) {
                    dropdown.remove(1);
                }
                
                // Add accounts
                this.accounts.forEach(account => {
                    const option = document.createElement('option');
                    option.value = account.id;
                    option.textContent = `${account.code} - ${account.name}`;
                    dropdown.appendChild(option);
                });
            },
            
            // Calculate transaction totals for real-time validation
            calculateTransactionTotals() {
                let totalDebit = 0;
                let totalCredit = 0;
                
                document.querySelectorAll('.transaction-entry').forEach(entry => {
                    const debitInput = entry.querySelector('.debit-amount');
                    const creditInput = entry.querySelector('.credit-amount');
                    
                    if (debitInput.value) {
                        totalDebit += parseFloat(debitInput.value);
                    }
                    
                    if (creditInput.value) {
                        totalCredit += parseFloat(creditInput.value);
                    }
                });
                
                document.getElementById('total-debit-amount').textContent = this.formatCurrency(totalDebit);
                document.getElementById('total-credit-amount').textContent = this.formatCurrency(totalCredit);
                
                // Show warning if not balanced
                const balanceCheck = document.getElementById('transaction-balance-check');
                if (Math.abs(totalDebit - totalCredit) > 0.01) {
                    balanceCheck.style.display = 'block';
                } else {
                    balanceCheck.style.display = 'none';
                }
            },
            
            // Change password
            changePassword() {
                const currentPassword = document.getElementById('current-password').value;
                const newPassword = document.getElementById('new-password').value;
                const confirmPassword = document.getElementById('confirm-password').value;
                
                // Simple validation
                if (newPassword !== confirmPassword) {
                    this.showNotification('New passwords do not match', 'error');
                    return;
                }
                
                if (newPassword.length < 8) {
                    this.showNotification('Password must be at least 8 characters', 'error');
                    return;
                }
                
                // In a real application, you would verify the current password and update it
                this.settings.password = newPassword; // In a real app, this would be hashed
                this.saveData();
                this.showNotification('Password changed successfully', 'success');
                document.getElementById('password-modal').style.display = 'none';
                document.getElementById('password-form').reset();
            },
            
            // Save application settings
            saveSettings() {
                this.settings.accountingMode = document.getElementById('accounting-mode').value;
                this.settings.accountingBasis = document.getElementById('accounting-basis').value;
                this.settings.companyName = document.getElementById('company-name-input').value;
                this.settings.baseCurrency = document.getElementById('base-currency').value;
                this.settings.financialYear = document.getElementById('financial-year').value;
                this.settings.autoLogout = document.getElementById('auto-logout').value;
                
                document.getElementById('company-name').textContent = this.settings.companyName;
                this.saveData();
                this.setupIdleTimer();
                this.showNotification('Settings saved successfully', 'success');
            },
            
            // Render accounts table and dropdowns
            renderAccounts() {
                const accountsTable = document.getElementById('accounts-table').querySelector('tbody');
                const accountsHierarchy = document.getElementById('accounts-hierarchy');
                const ledgerAccountSelect = document.getElementById('ledger-account');
                const journalAccountSelect = document.getElementById('journal-account');
                const accountTypeFilter = document.getElementById('account-type-filter').value;
                const accountSearch = document.getElementById('account-search').value.toLowerCase();
                
                // Clear existing options but keep first option
                ledgerAccountSelect.innerHTML = '<option value="">Select Account</option>';
                journalAccountSelect.innerHTML = '<option value="">All Accounts</option>';
                
                // Check if we have accounts
                if (this.accounts.length === 0) {
                    accountsTable.innerHTML = '<tr class="empty-state-row"><td colspan="5" class="empty-state"><i class="fas fa-chart-pie"></i><p>No accounts yet</p></td></tr>';
                    accountsHierarchy.innerHTML = '<div class="empty-state"><i class="fas fa-chart-pie"></i><p>No accounts yet</p></div>';
                    return;
                }
                
                // Remove empty state if it exists
                const emptyState = accountsTable.querySelector('.empty-state-row');
                if (emptyState) emptyState.remove();
                
                accountsTable.innerHTML = '';
                accountsHierarchy.innerHTML = '';
                
                // Filter accounts if needed
                let filteredAccounts = this.accounts;
                
                if (accountTypeFilter) {
                    filteredAccounts = filteredAccounts.filter(account => account.type === accountTypeFilter);
                }
                
                if (accountSearch) {
                    filteredAccounts = filteredAccounts.filter(account => 
                        account.name.toLowerCase().includes(accountSearch) || 
                        account.code.includes(accountSearch)
                    );
                }
                
                // Add accounts to dropdowns and table
                filteredAccounts.forEach(account => {
                    // Add to ledger dropdown
                    const option = document.createElement('option');
                    option.value = account.id;
                    option.textContent = `${account.code} - ${account.name}`;
                    ledgerAccountSelect.appendChild(option.cloneNode(true));
                    
                    // Add to journal dropdown
                    journalAccountSelect.appendChild(option.cloneNode(true));
                    
                    // Add to accounts table
                    const row = document.createElement('tr');
                    const balance = this.getAccountBalance(account.id);
                    const balanceClass = balance >= 0 ? 'debit' : 'credit';
                    
                    row.innerHTML = `
                        <td>${account.code}</td>
                        <td>${account.name}</td>
                        <td><span class="color-indicator color-${account.type.toLowerCase()}"></span>${account.type}</td>
                        <td class="${balanceClass}">${this.formatCurrency(Math.abs(balance))}</td>
                        <td>
                            <button class="btn-warning" data-account-id="${account.id}"><i class="fas fa-edit"></i> Edit</button>
                            <button class="btn-danger" data-account-id="${account.id}"><i class="fas fa-trash"></i> Delete</button>
                        </td>
                    `;
                    accountsTable.appendChild(row);
                });
                
                // Build account hierarchy
                this.buildAccountHierarchy(filteredAccounts, accountsHierarchy);
                
                // Add event listeners to edit and delete buttons
                accountsTable.querySelectorAll('.btn-warning').forEach(button => {
                    button.addEventListener('click', () => {
                        const accountId = button.dataset.accountId;
                        this.editAccount(accountId);
                    });
                });
                
                accountsTable.querySelectorAll('.btn-danger').forEach(button => {
                    button.addEventListener('click', () => {
                        const accountId = button.dataset.accountId;
                        this.deleteAccount(accountId);
                    });
                });
            },
            
            // Build account hierarchy view
            buildAccountHierarchy(accounts, container) {
                // Group accounts by type
                const accountsByType = {
                    'Asset': [],
                    'Liability': [],
                    'Equity': [],
                    'Revenue': [],
                    'Expense': []
                };
                
                accounts.forEach(account => {
                    if (accountsByType[account.type]) {
                        accountsByType[account.type].push(account);
                    }
                });
                
                // Create hierarchy for each type
                for (const type in accountsByType) {
                    if (accountsByType[type].length > 0) {
                        const typeHeader = document.createElement('div');
                        typeHeader.className = 'account-type-header';
                        typeHeader.innerHTML = `<h3><span class="color-indicator color-${type.toLowerCase()}"></span>${type}</h3>`;
                        container.appendChild(typeHeader);
                        
                        const typeContainer = document.createElement('div');
                        typeContainer.className = 'account-children';
                        
                        accountsByType[type].forEach(account => {
                            const accountItem = document.createElement('div');
                            accountItem.className = 'account-item';
                            const balance = this.getAccountBalance(account.id);
                            const balanceClass = balance >= 0 ? 'debit' : 'credit';
                            
                            accountItem.innerHTML = `
                                <strong>${account.code} - ${account.name}</strong>
                                <span class="${balanceClass}" style="float: right;">${this.formatCurrency(Math.abs(balance))}</span>
                                <div style="clear: both;"></div>
                                <small>${account.subtype || 'No subtype'}</small>
                            `;
                            typeContainer.appendChild(accountItem);
                        });
                        
                        container.appendChild(typeContainer);
                    }
                }
            },
            
            // Edit account
            editAccount(accountId) {
                const account = this.accounts.find(a => a.id === accountId);
                if (!account) return;
                
                document.getElementById('account-modal-title').textContent = 'Edit Account';
                document.getElementById('account-code').value = account.code;
                document.getElementById('account-name').value = account.name;
                document.getElementById('account-type').value = account.type;
                document.getElementById('account-subtype').value = account.subtype || '';
                document.getElementById('parent-account').value = account.parent || '';
                document.getElementById('opening-balance').value = account.openingBalance || 0;
                document.getElementById('account-description').value = account.description || '';
                
                this.populateParentAccountDropdown();
                document.getElementById('account-modal').style.display = 'flex';
                
                // Store the account id for updating
                document.getElementById('account-form').dataset.editingAccountId = accountId;
            },
            
            // Render transactions table with pagination
            renderTransactions() {
                const journalTable = document.getElementById('journal-table').querySelector('tbody');
                const dateFrom = document.getElementById('journal-date-from').value;
                const dateTo = document.getElementById('journal-date-to').value;
                const accountFilter = document.getElementById('journal-account').value;
                const searchTerm = document.getElementById('journal-search').value.toLowerCase();
                
                // Check if we have transactions
                if (this.transactions.length === 0) {
                    journalTable.innerHTML = '<tr class="empty-state-row"><td colspan="6" class="empty-state"><i class="fas fa-book"></i><p>No journal entries yet</p></td></tr>';
                    document.getElementById('journal-pagination').style.display = 'none';
                    return;
                }
                
                // Remove empty state if it exists
                const emptyState = journalTable.querySelector('.empty-state-row');
                if (emptyState) emptyState.remove();
                
                journalTable.innerHTML = '';
                
                // Filter transactions by date if specified
                let filteredTransactions = this.transactions.filter(transaction => {
                    if (dateFrom && transaction.date < dateFrom) return false;
                    if (dateTo && transaction.date > dateTo) return false;
                    if (accountFilter && transaction.debitAccount !== accountFilter && transaction.creditAccount !== accountFilter) return false;
                    if (searchTerm && !transaction.description.toLowerCase().includes(searchTerm) && 
                        !this.getAccountName(transaction.debitAccount).toLowerCase().includes(searchTerm) && 
                        !this.getAccountName(transaction.creditAccount).toLowerCase().includes(searchTerm)) return false;
                    return true;
                });
                
                if (filteredTransactions.length === 0) {
                    journalTable.innerHTML = '<tr class="empty-state-row"><td colspan="6" class="empty-state"><i class="fas fa-search"></i><p>No transactions found for selected filters</p></td></tr>';
                    document.getElementById('journal-pagination').style.display = 'none';
                    return;
                }
                
                // Reverse to show newest first
                filteredTransactions = filteredTransactions.reverse();
                
                // Pagination setup
                const pageSize = 10;
                let currentPage = 1;
                const totalPages = Math.ceil(filteredTransactions.length / pageSize);
                
                // Show pagination if needed
                if (totalPages > 1) {
                    document.getElementById('journal-pagination').style.display = 'flex';
                    document.getElementById('journal-page-info').textContent = `Page ${currentPage} of ${totalPages}`;
                    
                    // Pagination event listeners
                    document.getElementById('journal-next').addEventListener('click', () => {
                        if (currentPage < totalPages) {
                            currentPage++;
                            renderPage();
                        }
                    });
                    
                    document.getElementById('journal-prev').addEventListener('click', () => {
                        if (currentPage > 1) {
                            currentPage--;
                            renderPage();
                        }
                    });
                } else {
                    document.getElementById('journal-pagination').style.display = 'none';
                }
                
                // Render a page of transactions
                const renderPage = () => {
                    journalTable.innerHTML = '';
                    const startIndex = (currentPage - 1) * pageSize;
                    const endIndex = Math.min(startIndex + pageSize, filteredTransactions.length);
                    
                    for (let i = startIndex; i < endIndex; i++) {
                        const transaction = filteredTransactions[i];
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${transaction.date}</td>
                            <td>${transaction.description}</td>
                            <td>${this.getAccountName(transaction.debitAccount)}<br>${this.getAccountName(transaction.creditAccount)}</td>
                            <td class="debit">${this.formatCurrency(transaction.debitAmount)}</td>
                            <td class="credit">${this.formatCurrency(transaction.creditAmount)}</td>
                            <td>
                                <button class="btn-warning" data-transaction-id="${transaction.id}"><i class="fas fa-edit"></i> Edit</button>
                                <button class="btn-danger" data-transaction-id="${transaction.id}"><i class="fas fa-trash"></i> Delete</button>
                            </td>
                        `;
                        journalTable.appendChild(row);
                    }
                    
                    // Update page info
                    document.getElementById('journal-page-info').textContent = `Page ${currentPage} of ${totalPages}`;
                    
                    // Add event listeners to edit and delete buttons
                    journalTable.querySelectorAll('.btn-warning').forEach(button => {
                        button.addEventListener('click', () => {
                            const transactionId = button.dataset.transactionId;
                            this.editTransaction(transactionId);
                        });
                    });
                    
                    journalTable.querySelectorAll('.btn-danger').forEach(button => {
                        button.addEventListener('click', () => {
                            const transactionId = button.dataset.transactionId;
                            this.deleteTransaction(transactionId);
                        });
                    });
                };
                
                // Render the first page
                renderPage();
            },
            
            // Edit transaction
            editTransaction(transactionId) {
                // This would open the transaction modal with pre-filled data
                // For simplicity, we'll just show a notification
                this.showNotification('Edit functionality coming soon!', 'info');
            },
            
            // Render ledger
            renderLedger() {
                const ledgerTable = document.getElementById('ledger-table').querySelector('tbody');
                const accountInfo = document.getElementById('ledger-account-info');
                const accountId = document.getElementById('ledger-account').value;
                const dateFrom = document.getElementById('ledger-date-from').value;
                const dateTo = document.getElementById('ledger-date-to').value;
                
                ledgerTable.innerHTML = '';
                accountInfo.style.display = 'none';
                
                if (!accountId) {
                    ledgerTable.innerHTML = '<tr class="empty-state-row"><td colspan="6" class="empty-state"><i class="fas fa-file-invoice-dollar"></i><p>Select an account to view ledger</p></td></tr>';
                    return;
                }
                
                // Get account info
                const account = this.accounts.find(a => a.id === accountId);
                if (account) {
                    accountInfo.style.display = 'block';
                    document.getElementById('ledger-account-name').textContent = `${account.code} - ${account.name}`;
                    document.getElementById('ledger-account-type').textContent = account.type;
                    document.getElementById('ledger-account-balance').textContent = this.formatCurrency(this.getAccountBalance(account.id));
                }
                
                // Filter transactions for this account
                const accountTransactions = this.transactions.filter(transaction => {
                    if (transaction.debitAccount !== accountId && transaction.creditAccount !== accountId) return false;
                    if (dateFrom && transaction.date < dateFrom) return false;
                    if (dateTo && transaction.date > dateTo) return false;
                    return true;
                });
                
                if (accountTransactions.length === 0) {
                    ledgerTable.innerHTML = '<tr class="empty-state-row"><td colspan="6" class="empty-state"><i class="fas fa-search"></i><p>No transactions found for selected account and filters</p></td></tr>';
                    return;
                }
                
                let runningBalance = account ? account.openingBalance || 0 : 0;
                
                accountTransactions.forEach(transaction => {
                    const isDebit = transaction.debitAccount === accountId;
                    const amount = isDebit ? transaction.debitAmount : transaction.creditAmount;
                    
                    // Update running balance based on account type
                    if (account.type === 'Asset' || account.type === 'Expense') {
                        runningBalance += isDebit ? amount : -amount;
                    } else {
                        runningBalance += isDebit ? -amount : amount;
                    }
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${transaction.date}</td>
                        <td>${transaction.description}</td>
                        <td>${transaction.reference || ''}</td>
                        <td class="${isDebit ? 'debit' : ''}">${isDebit ? this.formatCurrency(amount) : ''}</td>
                        <td class="${!isDebit ? 'credit' : ''}">${!isDebit ? this.formatCurrency(amount) : ''}</td>
                        <td>${this.formatCurrency(runningBalance)}</td>
                    `;
                    ledgerTable.appendChild(row);
                });
            },
            
            // Generate trial balance
            generateTrialBalance() {
                const tbTable = document.getElementById('trial-balance-table').querySelector('tbody');
                const tbSummary = document.getElementById('tb-summary');
                const asOfDate = document.getElementById('tb-date').value;
                const tbStatus = document.getElementById('tb-status');
                
                tbTable.innerHTML = '';
                tbStatus.textContent = 'Generating...';
                tbSummary.style.display = 'none';
                
                // Simulate processing time
                setTimeout(() => {
                    // Filter transactions up to the selected date
                    const filteredTransactions = this.transactions.filter(transaction => {
                        return transaction.date <= asOfDate;
                    });
                    
                    // Calculate balances for each account
                    const accountBalances = {};
                    
                    this.accounts.forEach(account => {
                        accountBalances[account.id] = {
                            debit: 0,
                            credit: 0,
                            type: account.type,
                            name: account.name,
                            code: account.code
                        };
                    });
                    
                    filteredTransactions.forEach(transaction => {
                        // Debit side
                        if (accountBalances[transaction.debitAccount]) {
                            accountBalances[transaction.debitAccount].debit += transaction.debitAmount;
                        }
                        
                        // Credit side
                        if (accountBalances[transaction.creditAccount]) {
                            accountBalances[transaction.creditAccount].credit += transaction.creditAmount;
                        }
                    });
                    
                    // Add rows to trial balance table
                    let totalDebit = 0;
                    let totalCredit = 0;
                    
                    this.accounts.forEach(account => {
                        const balance = accountBalances[account.id];
                        if (balance.debit === 0 && balance.credit === 0) return;
                        
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${account.code} - ${account.name}</td>
                            <td class="debit">${this.formatCurrency(balance.debit)}</td>
                            <td class="credit">${this.formatCurrency(balance.credit)}</td>
                        `;
                        tbTable.appendChild(row);
                        
                        totalDebit += balance.debit;
                        totalCredit += balance.credit;
                    });
                    
                    // Add total row
                    const totalRow = document.createElement('tr');
                    totalRow.innerHTML = `
                        <td><strong>Total</strong></td>
                        <td class="debit"><strong>${this.formatCurrency(totalDebit)}</strong></td>
                        <td class="credit"><strong>${this.formatCurrency(totalCredit)}</strong></td>
                    `;
                    tbTable.appendChild(totalRow);
                    
                    // Show summary
                    tbSummary.style.display = 'block';
                    document.getElementById('tb-total-debit').textContent = this.formatCurrency(totalDebit);
                    document.getElementById('tb-total-credit').textContent = this.formatCurrency(totalCredit);
                    document.getElementById('tb-difference').textContent = this.formatCurrency(totalDebit - totalCredit);
                    
                    // Check if debits equal credits
                    if (Math.abs(totalDebit - totalCredit) > 0.01) {
                        tbStatus.innerHTML = '<span style="color: var(--danger);"><i class="fas fa-exclamation-triangle"></i> Not Balanced</span>';
                        this.showNotification('Trial balance is not balanced!', 'error');
                    } else {
                        tbStatus.innerHTML = '<span style="color: var(--success);"><i class="fas fa-check-circle"></i> Balanced</span>';
                        this.showNotification('Trial balance generated successfully', 'success');
                    }
                }, 500);
            },
            
            // Export trial balance as CSV
            exportTrialBalance() {
                const tbTable = document.getElementById('trial-balance-table');
                if (tbTable.querySelector('.empty-state-row')) {
                    this.showNotification('No trial balance data to export', 'error');
                    return;
                }
                
                const reportTitle = 'Trial Balance';
                let csvContent = `${reportTitle}\nAs of: ${document.getElementById('tb-date').value}\n\n`;
                
                for (let i = 0; i < tbTable.rows.length; i++) {
                    const row = tbTable.rows[i];
                    let rowText = '';
                    for (let j = 0; j < row.cells.length; j++) {
                        rowText += '"' + row.cells[j].textContent.replace(/"/g, '""') + '",';
                    }
                    csvContent += rowText + '\n';
                }
                
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                
                link.setAttribute('href', url);
                link.setAttribute('download', `Trial_Balance_${new Date().toISOString().split('T')[0]}.csv`);
                link.style.visibility = 'hidden';
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                this.showNotification('Trial balance exported successfully', 'success');
            },
            
            // Print trial balance
            printTrialBalance() {
                const tbTable = document.getElementById('trial-balance-table');
                if (tbTable.querySelector('.empty-state-row')) {
                    this.showNotification('No trial balance data to print', 'error');
                    return;
                }
                
                const asOfDate = document.getElementById('tb-date').value;
                const companyName = this.settings.companyName;
                
                const printWindow = window.open('', '_blank');
                printWindow.document.write(`
                    <html>
                    <head>
                        <title>Trial Balance - ${companyName}</title>
                        <style>
                            body { font-family: Arial, sans-serif; padding: 20px; }
                            h1 { color: #2c3e50; text-align: center; }
                            h2 { text-align: center; }
                            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                            th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
                            th { background-color: #f2f2f2; }
                            .debit { color: #2ecc71; }
                            .credit { color: #e74c3c; }
                            @media print {
                                body { padding: 0; }
                            }
                        </style>
                    </head>
                    <body>
                        <h1>${companyName}</h1>
                        <h2>Trial Balance</h2>
                        <p style="text-align: center;">As of: ${asOfDate}</p>
                        ${tbTable.outerHTML}
                    </body>
                    </html>
                `);
                printWindow.document.close();
                printWindow.focus();
                
                setTimeout(() => {
                    printWindow.print();
                    printWindow.close();
                }, 250);
            },
            
            // Export journal as CSV
            exportJournal() {
                const journalTable = document.getElementById('journal-table');
                if (journalTable.querySelector('.empty-state-row')) {
                    this.showNotification('No journal data to export', 'error');
                    return;
                }
                
                const dateFrom = document.getElementById('journal-date-from').value;
                const dateTo = document.getElementById('journal-date-to').value;
                let dateRange = '';
                
                if (dateFrom && dateTo) {
                    dateRange = `From ${dateFrom} to ${dateTo}`;
                }
                
                let csvContent = `Journal Entries ${dateRange}\n\n`;
                
                for (let i = 0; i < journalTable.rows.length; i++) {
                    const row = journalTable.rows[i];
                    let rowText = '';
                    for (let j = 0; j < row.cells.length - 1; j++) { // Skip actions column
                        rowText += '"' + row.cells[j].textContent.replace(/"/g, '""') + '",';
                    }
                    csvContent += rowText + '\n';
                }
                
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                
                link.setAttribute('href', url);
                link.setAttribute('download', `Journal_Entries_${new Date().toISOString().split('T')[0]}.csv`);
                link.style.visibility = 'hidden';
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                this.showNotification('Journal entries exported successfully', 'success');
            },
            
            // Export ledger as CSV
            exportLedger() {
                const ledgerTable = document.getElementById('ledger-table');
                if (ledgerTable.querySelector('.empty-state-row')) {
                    this.showNotification('No ledger data to export', 'error');
                    return;
                }
                
                const accountId = document.getElementById('ledger-account').value;
                const account = this.accounts.find(a => a.id === accountId);
                const accountName = account ? `${account.code} - ${account.name}` : 'Selected Account';
                const dateFrom = document.getElementById('ledger-date-from').value;
                const dateTo = document.getElementById('ledger-date-to').value;
                let dateRange = '';
                
                if (dateFrom && dateTo) {
                    dateRange = `From ${dateFrom} to ${dateTo}`;
                }
                
                let csvContent = `Ledger: ${accountName} ${dateRange}\n\n`;
                
                for (let i = 0; i < ledgerTable.rows.length; i++) {
                    const row = ledgerTable.rows[i];
                    let rowText = '';
                    for (let j = 0; j < row.cells.length; j++) {
                        rowText += '"' + row.cells[j].textContent.replace(/"/g, '""') + '",';
                    }
                    csvContent += rowText + '\n';
                }
                
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                
                link.setAttribute('href', url);
                link.setAttribute('download', `Ledger_${accountName.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`);
                link.style.visibility = 'hidden';
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                this.showNotification('Ledger exported successfully', 'success');
            },
            
            // Print ledger
            printLedger() {
                const ledgerTable = document.getElementById('ledger-table');
                if (ledgerTable.querySelector('.empty-state-row')) {
                    this.showNotification('No ledger data to print', 'error');
                    return;
                }
                
                const accountId = document.getElementById('ledger-account').value;
                const account = this.accounts.find(a => a.id === accountId);
                const accountName = account ? `${account.code} - ${account.name}` : 'Selected Account';
                const companyName = this.settings.companyName;
                
                const printWindow = window.open('', '_blank');
                printWindow.document.write(`
                    <html>
                    <head>
                        <title>Ledger - ${accountName}</title>
                        <style>
                            body { font-family: Arial, sans-serif; padding: 20px; }
                            h1 { color: #2c3e50; }
                            h2 { color: #34495e; }
                            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                            th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
                            th { background-color: #f2f2f2; }
                            .debit { color: #2ecc71; }
                            .credit { color: #e74c3c; }
                            @media print {
                                body { padding: 0; }
                            }
                        </style>
                    </head>
                    <body>
                        <h1>${companyName}</h1>
                        <h2>Ledger: ${accountName}</h2>
                        <p>Generated on: ${new Date().toLocaleDateString()}</p>
                        ${ledgerTable.outerHTML}
                    </body>
                    </html>
                `);
                printWindow.document.close();
                printWindow.focus();
                
                setTimeout(() => {
                    printWindow.print();
                    printWindow.close();
                }, 250);
            },
            
            // Print report
            printReport() {
                const reportContent = document.getElementById('report-content');
                if (reportContent.textContent.includes('Select report options')) {
                    this.showNotification('No report data to print', 'error');
                    return;
                }
                
                const reportTitle = document.getElementById('report-title').textContent;
                const companyName = this.settings.companyName;
                
                const printWindow = window.open('', '_blank');
                printWindow.document.write(`
                    <html>
                    <head>
                        <title>${reportTitle}</title>
                        <style>
                            body { font-family: Arial, sans-serif; padding: 20px; }
                            h1 { color: #2c3e50; text-align: center; }
                            h2 { text-align: center; }
                            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                            th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
                            th { background-color: #f2f2f2; }
                            .debit { color: #2ecc71; }
                            .credit { color: #e74c3c; }
                            @media print {
                                body { padding: 0; }
                            }
                        </style>
                    </head>
                    <body>
                        <h1>${companyName}</h1>
                        <h2>${reportTitle}</h2>
                        <p>Generated on: ${new Date().toLocaleDateString()}</p>
                        ${reportContent.innerHTML}
                    </body>
                    </html>
                `);
                printWindow.document.close();
                printWindow.focus();
                
                setTimeout(() => {
                    printWindow.print();
                    printWindow.close();
                }, 250);
            },
            
            // Generate financial report
            generateReport() {
                const reportType = document.getElementById('report-type').value;
                const reportStyle = document.getElementById('report-style').value;
                const reportDate = document.getElementById('report-date').value;
                const reportContent = document.getElementById('report-content');
                
                reportContent.innerHTML = '<div class="empty-state"><i class="fas fa-spinner fa-spin"></i><p>Generating report...</p></div>';
                
                // Simulate processing time
                setTimeout(() => {
                    let reportHTML = '';
                    
                    switch (reportType) {
                        case 'income-statement':
                            reportHTML = this.generateIncomeStatement(reportDate, reportStyle);
                            break;
                        case 'balance-sheet':
                            reportHTML = this.generateBalanceSheet(reportDate, reportStyle);
                            break;
                        case 'cash-flow':
                            reportHTML = this.generateCashFlowStatement(reportDate, reportStyle);
                            break;
                        case 'changes-equity':
                            reportHTML = this.generateChangesInEquity(reportDate, reportStyle);
                            break;
                        case 'general-ledger':
                            reportHTML = this.generateGeneralLedgerSummary(reportDate, reportStyle);
                            break;
                        case 'account-detail':
                            reportHTML = this.generateAccountDetailReport(reportDate, reportStyle);
                            break;
                    }
                    
                    reportContent.innerHTML = reportHTML;
                    document.getElementById('report-title').textContent = this.getReportTitle(reportType, reportStyle);
                    
                    this.showNotification('Report generated successfully', 'success');
                }, 1000);
            },
            
            // Export report as PDF
            exportReportPDF() {
                const reportContent = document.getElementById('report-content');
                if (reportContent.textContent.includes('Select report options')) {
                    this.showNotification('No report data to export', 'error');
                    return;
                }
                
                const reportTitle = document.getElementById('report-title').textContent;
                const companyName = this.settings.companyName;
                
                // Use html2canvas and jsPDF to generate PDF
                html2canvas(reportContent).then(canvas => {
                    const imgData = canvas.toDataURL('image/png');
                    const pdf = new jspdf.jsPDF({
                        orientation: 'portrait',
                        unit: 'mm',
                        format: 'a4'
                    });
                    
                    const imgWidth = 210; // A4 width in mm
                    const pageHeight = 297; // A4 height in mm
                    const imgHeight = canvas.height * imgWidth / canvas.width;
                    let heightLeft = imgHeight;
                    let position = 0;
                    
                    // Add header
                    pdf.setFontSize(16);
                    pdf.text(companyName, 105, 15, { align: 'center' });
                    pdf.setFontSize(14);
                    pdf.text(reportTitle, 105, 22, { align: 'center' });
                    pdf.setFontSize(10);
                    pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 29, { align: 'center' });
                    
                    // Add content
                    pdf.addImage(imgData, 'PNG', 0, 35, imgWidth, imgHeight);
                    heightLeft -= pageHeight;
                    
                    // Add additional pages if needed
                    while (heightLeft >= 0) {
                        position = heightLeft - imgHeight;
                        pdf.addPage();
                        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                        heightLeft -= pageHeight;
                    }
                    
                    // Save the PDF
                    pdf.save(`${reportTitle.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);
                    
                    this.showNotification('Report exported as PDF successfully', 'success');
                });
            },
            
            // Add a new transaction
            addTransaction() {
                const date = document.getElementById('transaction-date').value;
                const description = document.getElementById('transaction-description').value;
                const reference = document.getElementById('transaction-reference').value;
                const narration = document.getElementById('narration').value;
                
                // Get all entries
                const entries = [];
                let totalDebit = 0;
                let totalCredit = 0;
                
                document.querySelectorAll('.transaction-entry').forEach(entry => {
                    const account = entry.querySelector('.entry-account').value;
                    const debitAmount = parseFloat(entry.querySelector('.debit-amount').value) || 0;
                    const creditAmount = parseFloat(entry.querySelector('.credit-amount').value) || 0;
                    
                    if (account && (debitAmount > 0 || creditAmount > 0)) {
                        entries.push({
                            account,
                            debitAmount,
                            creditAmount
                        });
                        
                        totalDebit += debitAmount;
                        totalCredit += creditAmount;
                    }
                });
                
                // Validate form
                if (!date || !description || entries.length < 2) {
                    this.showNotification('Please fill all required fields and add at least two entries', 'error');
                    return;
                }
                
                // Validate debit equals credit for double-entry
                if (this.settings.accountingMode === 'double' && Math.abs(totalDebit - totalCredit) > 0.01) {
                    this.showNotification('Debit and Credit amounts must be equal for double-entry accounting', 'error');
                    return;
                }
                
                // Create transaction objects
                const transactionId = Date.now().toString();
                
                entries.forEach(entry => {
                    if (entry.debitAmount > 0) {
                        this.transactions.push({
                            id: transactionId,
                            date,
                            description,
                            reference,
                            debitAccount: entry.account,
                            debitAmount: entry.debitAmount,
                            creditAccount: null,
                            creditAmount: 0,
                            narration,
                            createdAt: new Date().toISOString()
                        });
                    }
                    
                    if (entry.creditAmount > 0) {
                        this.transactions.push({
                            id: transactionId,
                            date,
                            description,
                            reference,
                            debitAccount: null,
                            debitAmount: 0,
                            creditAccount: entry.account,
                            creditAmount: entry.creditAmount,
                            narration,
                            createdAt: new Date().toISOString()
                        });
                    }
                });
                
                // Save data and update UI
                this.saveData();
                this.renderTransactions();
                this.updateDashboard();
                
                // Add to recent activity
                this.addRecentActivity(`Added transaction: ${description}`, 'transaction');
                
                // Close modal and reset form
                document.getElementById('transaction-modal').style.display = 'none';
                document.getElementById('transaction-form').reset();
                
                this.showNotification('Transaction added successfully', 'success');
            },
            
            // Add a new account
            addAccount() {
                const code = document.getElementById('account-code').value;
                const name = document.getElementById('account-name').value;
                const type = document.getElementById('account-type').value;
                const subtype = document.getElementById('account-subtype').value;
                const parent = document.getElementById('parent-account').value || null;
                const openingBalance = parseFloat(document.getElementById('opening-balance').value) || 0;
                const description = document.getElementById('account-description').value;
                
                // Check if we're editing an existing account
                const editingAccountId = document.getElementById('account-form').dataset.editingAccountId;
                
                // Validate form
                if (!code || !name || !type) {
                    this.showNotification('Please fill all required fields', 'error');
                    return;
                }
                
                // Check if account code already exists (excluding the one we're editing)
                if (this.accounts.some(account => account.code === code && account.id !== editingAccountId)) {
                    this.showNotification('Account code already exists', 'error');
                    return;
                }
                
                if (editingAccountId) {
                    // Update existing account
                    const accountIndex = this.accounts.findIndex(a => a.id === editingAccountId);
                    if (accountIndex !== -1) {
                        this.accounts[accountIndex] = {
                            ...this.accounts[accountIndex],
                            code,
                            name,
                            type,
                            subtype,
                            parent,
                            openingBalance,
                            description
                        };
                        
                        this.showNotification('Account updated successfully', 'success');
                    }
                } else {
                    // Create account object
                    const account = {
                        id: 'acc-' + Date.now(),
                        code,
                        name,
                        type,
                        subtype,
                        parent,
                        openingBalance,
                        description,
                        createdAt: new Date().toISOString()
                    };
                    
                    // Add to accounts array
                    this.accounts.push(account);
                    
                    // If there's an opening balance, create a transaction
                    if (openingBalance !== 0) {
                        let debitAccount, creditAccount;
                        let amount = Math.abs(openingBalance);
                        
                        if (openingBalance > 0) {
                            if (['Asset', 'Expense'].includes(type)) {
                                debitAccount = account.id;
                                creditAccount = this.getEquityAccountId();
                            } else {
                                debitAccount = this.getEquityAccountId();
                                creditAccount = account.id;
                            }
                        } else {
                            // openingBalance is negative
                            if (['Asset', 'Expense'].includes(type)) {
                                debitAccount = this.getEquityAccountId();
                                creditAccount = account.id;
                            } else {
                                debitAccount = account.id;
                                creditAccount = this.getEquityAccountId();
                            }
                        }
                        
                        const transaction = {
                            id: Date.now().toString() + '-opening',
                            date: new Date().toISOString().split('T')[0],
                            description: `Opening balance for ${name}`,
                            debitAccount,
                            debitAmount: amount,
                            creditAccount,
                            creditAmount: amount,
                            narration: 'Opening balance',
                            createdAt: new Date().toISOString()
                        };
                        
                        this.transactions.push(transaction);
                    }
                    
                    this.showNotification('Account added successfully', 'success');
                }
                
                // Save data and update UI
                this.saveData();
                this.renderAccounts();
                this.renderTransactions();
                this.updateDashboard();
                
                // Add to recent activity
                this.addRecentActivity(`${editingAccountId ? 'Updated' : 'Added'} account: ${name}`, 'account');
                
                // Close modal and reset form
                document.getElementById('account-modal').style.display = 'none';
                document.getElementById('account-form').reset();
                delete document.getElementById('account-form').dataset.editingAccountId;
            },
            
            // Delete a transaction
            deleteTransaction(transactionId) {
                if (confirm('Are you sure you want to delete this transaction?')) {
                    this.transactions = this.transactions.filter(t => t.id !== transactionId);
                    this.saveData();
                    this.renderTransactions();
                    this.updateDashboard();
                    this.showNotification('Transaction deleted successfully', 'success');
                    
                    // Add to recent activity
                    this.addRecentActivity('Deleted a transaction', 'transaction');
                }
            },
            
            // Delete an account
            deleteAccount(accountId) {
                // Check if account has transactions
                const hasTransactions = this.transactions.some(t => 
                    t.debitAccount === accountId || t.creditAccount === accountId
                );
                
                if (hasTransactions) {
                    this.showNotification('Cannot delete account with existing transactions', 'error');
                    return;
                }
                
                if (confirm('Are you sure you want to delete this account?')) {
                    const account = this.accounts.find(a => a.id === accountId);
                    this.accounts = this.accounts.filter(a => a.id !== accountId);
                    this.saveData();
                    this.renderAccounts();
                    this.showNotification('Account deleted successfully', 'success');
                    
                    // Add to recent activity
                    this.addRecentActivity(`Deleted account: ${account.name}`, 'account');
                }
            },
            
            // Update dashboard with summary information
            updateDashboard() {
                // Calculate total assets
                const totalAssets = this.calculateAccountTypeTotal('Asset');
                document.getElementById('total-assets').textContent = this.formatCurrency(totalAssets);
                
                // Calculate total liabilities
                const totalLiabilities = this.calculateAccountTypeTotal('Liability');
                document.getElementById('total-liabilities').textContent = this.formatCurrency(totalLiabilities);
                
                // Calculate equity
                const equity = this.calculateAccountTypeTotal('Equity');
                document.getElementById('total-equity').textContent = this.formatCurrency(equity);
                
                // Calculate net income (Revenue - Expenses)
                const revenue = this.calculateAccountTypeTotal('Revenue');
                const expenses = this.calculateAccountTypeTotal('Expense');
                const netIncome = revenue - expenses;
                document.getElementById('net-income').textContent = this.formatCurrency(netIncome);
                
                // Update financial health chart
                this.updateFinancialHealthChart(totalAssets, totalLiabilities, equity, netIncome);
                
                // Update recent transactions
                const recentTransactionsTable = document.getElementById('recent-transactions').querySelector('tbody');
                
                // Remove empty state if it exists
                const emptyState = recentTransactionsTable.querySelector('.empty-state-row');
                if (emptyState) emptyState.remove();
                
                // Show last 5 transactions
                const recentTransactions = this.transactions.slice(-5).reverse();
                
                if (recentTransactions.length === 0) {
                    recentTransactionsTable.innerHTML = '<tr class="empty-state-row"><td colspan="5" class="empty-state"><i class="fas fa-receipt"></i><p>No transactions yet</p></td></tr>';
                    return;
                }
                
                recentTransactionsTable.innerHTML = '';
                
                recentTransactions.forEach(transaction => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${transaction.date}</td>
                        <td>${transaction.description}</td>
                        <td>${this.getAccountName(transaction.debitAccount)}<br>${this.getAccountName(transaction.creditAccount)}</td>
                        <td class="debit">${this.formatCurrency(transaction.debitAmount)}</td>
                        <td class="credit">${this.formatCurrency(transaction.creditAmount)}</td>
                    `;
                    recentTransactionsTable.appendChild(row);
                });
                
                // Update recent activity
                this.updateRecentActivity();
            },
            
            // Update financial health chart
            updateFinancialHealthChart(assets, liabilities, equity, netIncome) {
                const ctx = document.getElementById('financial-health-chart').getContext('2d');
                
                // Destroy existing chart if it exists
                if (this.financialChart) {
                    this.financialChart.destroy();
                }
                
                // Create new chart
                this.financialChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Assets', 'Liabilities', 'Equity'],
                        datasets: [{
                            data: [assets, liabilities, equity],
                            backgroundColor: [
                                '#3498db',
                                '#e74c3c',
                                '#2ecc71'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            },
                            title: {
                                display: true,
                                text: 'Financial Position'
                            }
                        }
                    }
                });
            },
            
            // Update recent activity list
            updateRecentActivity() {
                const activityList = document.getElementById('recent-activity-list');
                
                // Get recent activities from localStorage or use default
                let activities = JSON.parse(localStorage.getItem('openledger-activities')) || [];
                
                if (activities.length === 0) {
                    activityList.innerHTML = '<li>No recent activity</li>';
                    return;
                }
                
                // Show last 5 activities
                activities = activities.slice(-5).reverse();
                activityList.innerHTML = '';
                
                activities.forEach(activity => {
                    const li = document.createElement('li');
                    li.innerHTML = `
                        <div class="activity-date">${new Date(activity.date).toLocaleString()}</div>
                        <div class="activity-content">${activity.message}</div>
                    `;
                    activityList.appendChild(li);
                });
            },
            
            // Add recent activity
            addRecentActivity(message, type) {
                let activities = JSON.parse(localStorage.getItem('openledger-activities')) || [];
                
                activities.push({
                    date: new Date().toISOString(),
                    message,
                    type
                });
                
                localStorage.setItem('openledger-activities', JSON.stringify(activities));
                this.updateRecentActivity();
            },
            
            // Export all data as JSON
            exportData() {
                const data = {
                    settings: this.settings,
                    accounts: this.accounts,
                    transactions: this.transactions,
                    exportDate: new Date().toISOString(),
                    version: '1.2.0'
                };
                
                const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                
                link.setAttribute('href', url);
                link.setAttribute('download', `openledger_backup_${new Date().toISOString().split('T')[0]}.json`);
                link.style.visibility = 'hidden';
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                this.showNotification('Data exported successfully', 'success');
            },
            
            // Create a backup
            createBackup() {
                this.exportData(); // For now, same as export
                this.showNotification('Backup created successfully', 'success');
            },
            
            // Restore from backup
            restoreBackup(file) {
                if (!file) return;
                
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    try {
                        const data = JSON.parse(e.target.result);
                        
                        if (confirm('Restoring from backup will overwrite your current data. Continue?')) {
                            if (data.settings) this.settings = data.settings;
                            if (data.accounts) this.accounts = data.accounts;
                            if (data.transactions) this.transactions = data.transactions;
                            
                            this.saveData();
                            this.renderAccounts();
                            this.renderTransactions();
                            this.updateDashboard();
                            
                            // Update UI with settings
                            document.getElementById('accounting-mode').value = this.settings.accountingMode;
                            document.getElementById('accounting-basis').value = this.settings.accountingBasis;
                            document.getElementById('company-name-input').value = this.settings.companyName;
                            document.getElementById('base-currency').value = this.settings.baseCurrency;
                            document.getElementById('financial-year').value = this.settings.financialYear;
                            document.getElementById('auto-logout').value = this.settings.autoLogout;
                            document.getElementById('company-name').textContent = this.settings.companyName;
                            
                            this.showNotification('Backup restored successfully', 'success');
                            
                            // Add to recent activity
                            this.addRecentActivity('Restored from backup', 'system');
                        }
                    } catch (error) {
                        console.error('Error restoring backup:', error);
                        this.showNotification('Error restoring backup: Invalid file format', 'error');
                    }
                };
                
                reader.onerror = () => {
                    this.showNotification('Error reading file', 'error');
                };
                
                reader.readAsText(file);
            },
            
            // Import data from JSON file
            importData(file) {
                if (!file) return;
                
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    try {
                        const data = JSON.parse(e.target.result);
                        
                        if (confirm('Importing data will overwrite your current data. Continue?')) {
                            if (data.settings) this.settings = data.settings;
                            if (data.accounts) this.accounts = data.accounts;
                            if (data.transactions) this.transactions = data.transactions;
                            
                            this.saveData();
                            this.renderAccounts();
                            this.renderTransactions();
                            this.updateDashboard();
                            
                            // Update UI with settings
                            document.getElementById('accounting-mode').value = this.settings.accountingMode;
                            document.getElementById('accounting-basis').value = this.settings.accountingBasis;
                            document.getElementById('company-name-input').value = this.settings.companyName;
                            document.getElementById('base-currency').value = this.settings.baseCurrency;
                            document.getElementById('financial-year').value = this.settings.financialYear;
                            document.getElementById('auto-logout').value = this.settings.autoLogout;
                            document.getElementById('company-name').textContent = this.settings.companyName;
                            
                            this.showNotification('Data imported successfully', 'success');
                            
                            // Add to recent activity
                            this.addRecentActivity('Imported data', 'system');
                        }
                    } catch (error) {
                        console.error('Error importing data:', error);
                        this.showNotification('Error importing data: Invalid file format', 'error');
                    }
                };
                
                reader.onerror = () => {
                    this.showNotification('Error reading file', 'error');
                };
                
                reader.readAsText(file);
            },
            
            // Clear all data
            clearData() {
                if (confirm('Are you sure you want to clear all data? This action cannot be undone.')) {
                    localStorage.clear();
                    this.settings = {
                        accountingMode: 'double',
                        accountingBasis: 'accrual',
                        companyName: 'Company Name',
                        baseCurrency: 'USD',
                        financialYear: new Date(new Date().getFullYear(), 0, 1).toISOString().split('T')[0],
                        autoLogout: 30,
                        password: null
                    };
                    this.accounts = [];
                    this.transactions = [];
                    this.saveData();
                    this.renderAccounts();
                    this.renderTransactions();
                    this.updateDashboard();
                    this.showNotification('All data has been cleared', 'success');
                    
                    // Add to recent activity
                    this.addRecentActivity('Cleared all data', 'system');
                }
            },
            
            // Load sample data
            loadSampleData() {
                if (confirm('Load sample data? This will add sample accounts and transactions.')) {
                    // Sample accounts
                    const sampleAccounts = [
                        { id: 'acc-1', code: '1010', name: 'Cash', type: 'Asset', subtype: 'Current Asset', openingBalance: 5000, parent: null },
                        { id: 'acc-2', code: '1020', name: 'Accounts Receivable', type: 'Asset', subtype: 'Current Asset', openingBalance: 2500, parent: null },
                        { id: 'acc-3', code: '1030', name: 'Inventory', type: 'Asset', subtype: 'Current Asset', openingBalance: 7000, parent: null },
                        { id: 'acc-4', code: '1040', name: 'Equipment', type: 'Asset', subtype: 'Fixed Asset', openingBalance: 15000, parent: null },
                        { id: 'acc-5', code: '2010', name: 'Accounts Payable', type: 'Liability', subtype: 'Current Liability', openingBalance: 3000, parent: null },
                        { id: 'acc-6', code: '2020', name: 'Loans Payable', type: 'Liability', subtype: 'Long-term Liability', openingBalance: 10000, parent: null },
                        { id: 'acc-7', code: '3010', name: 'Common Stock', type: 'Equity', subtype: '', openingBalance: 15000, parent: null },
                        { id: 'acc-8', code: '3020', name: 'Retained Earnings', type: 'Equity', subtype: '', openingBalance: 4500, parent: null },
                        { id: 'acc-9', code: '4010', name: 'Sales Revenue', type: 'Revenue', subtype: 'Operating Revenue', openingBalance: 0, parent: null },
                        { id: 'acc-10', code: '5010', name: 'Cost of Goods Sold', type: 'Expense', subtype: 'Operating Expense', openingBalance: 0, parent: null },
                        { id: 'acc-11', code: '5020', name: 'Rent Expense', type: 'Expense', subtype: 'Operating Expense', openingBalance: 0, parent: null },
                        { id: 'acc-12', code: '5030', name: 'Salaries Expense', type: 'Expense', subtype: 'Operating Expense', openingBalance: 0, parent: null }
                    ];
                    
                    // Sample transactions
                    const sampleTransactions = [
                        {
                            id: 'tx-1',
                            date: new Date(new Date().setDate(new Date().getDate() - 10)).toISOString().split('T')[0],
                            description: 'Sold goods to customer',
                            reference: 'INV-1001',
                            debitAccount: 'acc-1',
                            debitAmount: 1200,
                            creditAccount: 'acc-9',
                            creditAmount: 1200,
                            narration: 'Invoice #1001',
                            createdAt: new Date().toISOString()
                        },
                        {
                            id: 'tx-2',
                            date: new Date(new Date().setDate(new Date().getDate() - 8)).toISOString().split('T')[0],
                            description: 'Purchased inventory',
                            reference: 'PO-2001',
                            debitAccount: 'acc-3',
                            debitAmount: 800,
                            creditAccount: 'acc-5',
                            creditAmount: 800,
                            narration: 'Purchase order #2001',
                            createdAt: new Date().toISOString()
                        },
                        {
                            id: 'tx-3',
                            date: new Date(new Date().setDate(new Date().getDate() - 5)).toISOString().split('T')[0],
                            description: 'Paid rent',
                            reference: 'CHK-1001',
                            debitAccount: 'acc-11',
                            debitAmount: 1000,
                            creditAccount: 'acc-1',
                            creditAmount: 1000,
                            narration: 'Monthly rent payment',
                            createdAt: new Date().toISOString()
                        },
                        {
                            id: 'tx-4',
                            date: new Date(new Date().setDate(new Date().getDate() - 3)).toISOString().split('T')[0],
                            description: 'Paid salaries',
                            reference: 'CHK-1002',
                            debitAccount: 'acc-12',
                            debitAmount: 2500,
                            creditAccount: 'acc-1',
                            creditAmount: 2500,
                            narration: 'Bi-weekly payroll',
                            createdAt: new Date().toISOString()
                        }
                    ];
                    
                    this.accounts = sampleAccounts;
                    this.transactions = sampleTransactions;
                    this.saveData();
                    this.renderAccounts();
                    this.renderTransactions();
                    this.updateDashboard();
                    this.showNotification('Sample data loaded successfully', 'success');
                    
                    // Add to recent activity
                    this.addRecentActivity('Loaded sample data', 'system');
                }
            },
            
            // Show notification
            showNotification(message, type) {
                const notification = document.getElementById('notification');
                let icon = '';
                
                switch (type) {
                    case 'success':
                        icon = '<i class="fas fa-check-circle"></i>';
                        break;
                    case 'error':
                        icon = '<i class="fas fa-exclamation-circle"></i>';
                        break;
                    case 'warning':
                        icon = '<i class="fas fa-exclamation-triangle"></i>';
                        break;
                    case 'info':
                        icon = '<i class="fas fa-info-circle"></i>';
                        break;
                }
                
                notification.innerHTML = `${icon} ${message}`;
                notification.className = `notification ${type} show`;
                
                setTimeout(() => {
                    notification.className = 'notification';
                }, 3000);
            },
            
            // Format currency amount
            formatCurrency(amount) {
                return new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: this.settings.baseCurrency
                }).format(amount);
            },
            
            // Get account name by ID
            getAccountName(accountId) {
                if (!accountId) return 'N/A';
                const account = this.accounts.find(a => a.id === accountId);
                return account ? `${account.code} - ${account.name}` : 'Unknown Account';
            },
            
            // Get account balance
            getAccountBalance(accountId) {
                const account = this.accounts.find(a => a.id === accountId);
                if (!account) return 0;
                
                let balance = account.openingBalance || 0;
                
                this.transactions.forEach(transaction => {
                    if (transaction.debitAccount === accountId) {
                        balance += transaction.debitAmount;
                    }
                    
                    if (transaction.creditAccount === accountId) {
                        balance -= transaction.creditAmount;
                    }
                });
                
                return balance;
            },
            
            // Calculate total for an account type
            calculateAccountTypeTotal(type) {
                return this.accounts
                    .filter(account => account.type === type)
                    .reduce((total, account) => total + this.getAccountBalance(account.id), 0);
            },
            
            // Get equity account ID (create one if it doesn't exist)
            getEquityAccountId() {
                let equityAccount = this.accounts.find(a => a.type === 'Equity' && a.name === 'Retained Earnings');
                
                if (!equityAccount) {
                    equityAccount = {
                        id: 'equity-' + Date.now(),
                        code: '3020',
                        name: 'Retained Earnings',
                        type: 'Equity',
                        openingBalance: 0,
                        createdAt: new Date().toISOString()
                    };
                    this.accounts.push(equityAccount);
                    this.saveData();
                }
                
                return equityAccount.id;
            },
            
            // Generate income statement
            generateIncomeStatement(asOfDate, style) {
                // Calculate revenue total
                const revenueAccounts = this.accounts.filter(a => a.type === 'Revenue');
                let revenueTotal = 0;
                
                revenueAccounts.forEach(account => {
                    revenueTotal += this.getAccountBalance(account.id);
                });
                
                // Calculate expense total
                const expenseAccounts = this.accounts.filter(a => a.type === 'Expense');
                let expenseTotal = 0;
                
                expenseAccounts.forEach(account => {
                    expenseTotal += this.getAccountBalance(account.id);
                });
                
                // Net income
                const netIncome = revenueTotal - expenseTotal;
                
                // Generate HTML table
                let html = `
                    <table>
                        <thead>
                            <tr>
                                <th>Account</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Revenue</strong></td>
                                <td></td>
                            </tr>
                `;
                
                // Add revenue accounts
                revenueAccounts.forEach(account => {
                    const balance = this.getAccountBalance(account.id);
                    if (balance !== 0) {
                        html += `
                            <tr>
                                <td>${account.name}</td>
                                <td>${this.formatCurrency(balance)}</td>
                            </tr>
                        `;
                    }
                });
                
                html += `
                            <tr>
                                <td><strong>Total Revenue</strong></td>
                                <td><strong>${this.formatCurrency(revenueTotal)}</strong></td>
                            </tr>
                            <tr>
                                <td><strong>Expenses</strong></td>
                                <td></td>
                            </tr>
                `;
                
                // Add expense accounts
                expenseAccounts.forEach(account => {
                    const balance = this.getAccountBalance(account.id);
                    if (balance !== 0) {
                        html += `
                            <tr>
                                <td>${account.name}</td>
                                <td>${this.formatCurrency(balance)}</td>
                            </tr>
                        `;
                    }
                });
                
                html += `
                            <tr>
                                <td><strong>Total Expenses</strong></td>
                                <td><strong>${this.formatCurrency(expenseTotal)}</strong></td>
                            </tr>
                            <tr>
                                <td><strong>Net Income</strong></td>
                                <td><strong>${this.formatCurrency(netIncome)}</strong></td>
                            </tr>
                        </tbody>
                    </table>
                `;
                
                return html;
            },
            
            // Generate balance sheet
            generateBalanceSheet(asOfDate, style) {
                // Calculate totals
                const totalAssets = this.calculateAccountTypeTotal('Asset');
                const totalLiabilities = this.calculateAccountTypeTotal('Liability');
                const totalEquity = this.calculateAccountTypeTotal('Equity');
                
                // Calculate net income (Revenue - Expenses)
                const revenue = this.calculateAccountTypeTotal('Revenue');
                const expenses = this.calculateAccountTypeTotal('Expense');
                const netIncome = revenue - expenses;
                
                // Generate HTML table
                let html = `
                    <table>
                        <thead>
                            <tr>
                                <th>Account</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Assets</strong></td>
                                <td></td>
                            </tr>
                `;
                
                // Add asset accounts
                const assetAccounts = this.accounts.filter(a => a.type === 'Asset');
                assetAccounts.forEach(account => {
                    const balance = this.getAccountBalance(account.id);
                    if (balance !== 0) {
                        html += `
                            <tr>
                                <td>${account.name}</td>
                                <td>${this.formatCurrency(balance)}</td>
                            </tr>
                        `;
                    }
                });
                
                html += `
                            <tr>
                                <td><strong>Total Assets</strong></td>
                                <td><strong>${this.formatCurrency(totalAssets)}</strong></td>
                            </tr>
                            <tr>
                                <td><strong>Liabilities</strong></td>
                                <td></td>
                            </tr>
                `;
                
                // Add liability accounts
                const liabilityAccounts = this.accounts.filter(a => a.type === 'Liability');
                liabilityAccounts.forEach(account => {
                    const balance = this.getAccountBalance(account.id);
                    if (balance !== 0) {
                        html += `
                            <tr>
                                <td>${account.name}</td>
                                <td>${this.formatCurrency(balance)}</td>
                            </tr>
                        `;
                    }
                });
                
                html += `
                            <tr>
                                <td><strong>Total Liabilities</strong></td>
                                <td><strong>${this.formatCurrency(totalLiabilities)}</strong></td>
                            </tr>
                            <tr>
                                <td><strong>Equity</strong></td>
                                <td></td>
                            </tr>
                `;
                
                // Add equity accounts
                const equityAccounts = this.accounts.filter(a => a.type === 'Equity');
                equityAccounts.forEach(account => {
                    const balance = this.getAccountBalance(account.id);
                    if (balance !== 0) {
                        html += `
                            <tr>
                                <td>${account.name}</td>
                                <td>${this.formatCurrency(balance)}</td>
                            </tr>
                        `;
                    }
                });
                
                html += `
                            <tr>
                                <td>Retained Earnings</td>
                                <td>${this.formatCurrency(netIncome)}</td>
                            </tr>
                            <tr>
                                <td><strong>Total Equity</strong></td>
                                <td><strong>${this.formatCurrency(totalEquity + netIncome)}</strong></td>
                            </tr>
                            <tr>
                                <td><strong>Total Liabilities & Equity</strong></td>
                                <td><strong>${this.formatCurrency(totalLiabilities + totalEquity + netIncome)}</strong></td>
                            </tr>
                        </tbody>
                    </table>
                `;
                
                return html;
            },
            
            // Generate cash flow statement
            generateCashFlowStatement(asOfDate, style) {
                // Simplified implementation
                return `
                    <div class="empty-state">
                        <i class="fas fa-money-bill-wave"></i>
                        <p>Cash Flow Statement implementation would go here.</p>
                        <p>This would include operating, investing, and financing activities.</p>
                    </div>
                `;
            },
            
            // Generate changes in equity statement
            generateChangesInEquity(asOfDate, style) {
                // Simplified implementation
                return `
                    <div class="empty-state">
                        <i class="fas fa-chart-line"></i>
                        <p>Statement of Changes in Equity implementation would go here.</p>
                        <p>This would show changes in equity accounts over time.</p>
                    </div>
                `;
            },
            
            // Generate general ledger summary
            generateGeneralLedgerSummary(asOfDate, style) {
                let html = `
                    <table>
                        <thead>
                            <tr>
                                <th>Account</th>
                                <th>Type</th>
                                <th>Debit</th>
                                <th>Credit</th>
                                <th>Balance</th>
                            </tr>
                        </thead>
                        <tbody>
                `;
                
                this.accounts.forEach(account => {
                    const balance = this.getAccountBalance(account.id);
                    if (balance !== 0) {
                        const balanceClass = balance >= 0 ? 'debit' : 'credit';
                        html += `
                            <tr>
                                <td>${account.code} - ${account.name}</td>
                                <td>${account.type}</td>
                                <td>${balance >= 0 ? this.formatCurrency(balance) : ''}</td>
                                <td>${balance < 0 ? this.formatCurrency(Math.abs(balance)) : ''}</td>
                                <td class="${balanceClass}">${this.formatCurrency(Math.abs(balance))}</td>
                            </tr>
                        `;
                    }
                });
                
                html += `</tbody></table>`;
                return html;
            },
            
            // Generate account detail report
            generateAccountDetailReport(asOfDate, style) {
                return `
                    <div class="empty-state">
                        <i class="fas fa-file-alt"></i>
                        <p>Account Detail Report implementation would go here.</p>
                        <p>This would show detailed transactions for a selected account.</p>
                    </div>
                `;
            },
            
            // Get report title based on type and style
            getReportTitle(type, style) {
                const titles = {
                    'income-statement': 'Income Statement',
                    'balance-sheet': 'Balance Sheet',
                    'cash-flow': 'Cash Flow Statement',
                    'changes-equity': 'Statement of Changes in Equity',
                    'general-ledger': 'General Ledger Summary',
                    'account-detail': 'Account Detail Report'
                };
                
                const styles = {
                    'standard': '',
                    'comparative': 'Comparative ',
                    'common-size': 'Common Size '
                };
                
                return styles[style] + titles[type];
            }
        };
        
        // Initialize the application when the DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            OpenLedger.init();
        });
    </script>
</body>
</html>